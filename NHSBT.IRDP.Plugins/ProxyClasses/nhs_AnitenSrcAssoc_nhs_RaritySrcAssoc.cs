// <auto-generated />

using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace NHSBT.IRDP.Plugins.ProxyClasses
{
    [EntityLogicalNameAttribute("nhs_anitensrcassoc_nhs_raritysrcassoc")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    [DataContract(Name = "Entity", Namespace = "http://schemas.microsoft.com/xrm/2011/Contracts")]
    public partial class nhs_AnitenSrcAssoc_nhs_RaritySrcAssoc : BaseProxyClass
    {
        public new const string LogicalName = "nhs_anitensrcassoc_nhs_raritysrcassoc";
        public const int ObjectTypeCode = 10087;
        public const string PrimaryIdAttribute = "nhs_anitensrcassoc_nhs_raritysrcassocid";
        public const string PrimaryNameAttribute = "";
        
        static nhs_AnitenSrcAssoc_nhs_RaritySrcAssoc()
        {
            BaseProxyClass.RegisterProxyType(typeof(nhs_AnitenSrcAssoc_nhs_RaritySrcAssoc), "nhs_anitensrcassoc_nhs_raritysrcassoc");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public nhs_AnitenSrcAssoc_nhs_RaritySrcAssoc() : base(new Entity("nhs_anitensrcassoc_nhs_raritysrcassoc")) { }
        public nhs_AnitenSrcAssoc_nhs_RaritySrcAssoc(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<nhs_AnitenSrcAssoc_nhs_RaritySrcAssoc>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
        ///<para>Logical Name: versionnumber</para>
        ///</summary>
        [AttributeLogicalNameAttribute("versionnumber")]
        public int? VersionNumber
        {
	        get { return this.GetPropertyValue<int?>("versionnumber"); }
        }
        ///<summary>
        ///<para>Logical Name: nhs_raritysourceassociationid</para>
        ///</summary>
        [AttributeLogicalNameAttribute("nhs_raritysourceassociationid")]
        public Guid Nhs_raritysourceassociationid
        {
	        get { return this.GetPropertyValue<Guid>("nhs_raritysourceassociationid"); }
        }
        ///<summary>
        ///<para>Logical Name: nhs_antigensourceassociationid</para>
        ///</summary>
        [AttributeLogicalNameAttribute("nhs_antigensourceassociationid")]
        public Guid Nhs_antigensourceassociationid
        {
	        get { return this.GetPropertyValue<Guid>("nhs_antigensourceassociationid"); }
        }
        ///<summary>
        ///<para>Key Property (Uniqueidentifier)</para>
        ///<para>Logical Name: nhs_anitensrcassoc_nhs_raritysrcassocid</para>
        ///</summary>
        [AttributeLogicalNameAttribute("nhs_anitensrcassoc_nhs_raritysrcassocid")]
        public Guid Nhs_AnitenSrcAssoc_nhs_RaritySrcAssocId
        {
	        get
	        {
		        return base.Id;
	        }
	        set
	        {
		        base.Id = value;
		        base.SetPropertyValue("nhs_anitensrcassoc_nhs_raritysrcassocid", value, "Nhs_AnitenSrcAssoc_nhs_RaritySrcAssocId");
	        }
        }


         /// <summary>
        /// <para>Related Entity: <b>Antigen-Source Association</b></para>
        /// <para>N:N Relationship</para>
        /// <para>Schema Name: nhs_AntigenSrcAssoc_nhs_RaritySrcAssoc</para>
        /// </summary>
        public List<Antigen_SourceAssociation> GetAntigen_SourceAssociations (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Antigen_SourceAssociation>(Service, this, "nhs_anitensrcassoc_nhs_raritysrcassoc", "nhs_anitensrcassoc_nhs_raritysrcassocid", "nhs_antigensourceassociation", "nhs_antigensourceassociationid", "nhs_anitensrcassoc_nhs_raritysrcassoc", "nhs_raritysourceassociationid", "nhs_antigensourceassociationid", Columns); }
        public List<Antigen_SourceAssociation> GetAntigen_SourceAssociations (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities<Antigen_SourceAssociation>(Service, this, "nhs_anitensrcassoc_nhs_raritysrcassoc", "nhs_anitensrcassoc_nhs_raritysrcassocid", "nhs_antigensourceassociation", "nhs_antigensourceassociationid", "nhs_anitensrcassoc_nhs_raritysrcassoc", "nhs_raritysourceassociationid", "nhs_antigensourceassociationid", Columns); }
        public void RelateAntigen_SourceAssociations (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "nhs_AntigenSrcAssoc_nhs_RaritySrcAssoc", Items); }
        public void RelateAntigen_SourceAssociations (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "nhs_AntigenSrcAssoc_nhs_RaritySrcAssoc", Items); }
        public void UnRelateAntigen_SourceAssociations (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "nhs_AntigenSrcAssoc_nhs_RaritySrcAssoc", Items); }
        public void UnRelateAntigen_SourceAssociations (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "nhs_AntigenSrcAssoc_nhs_RaritySrcAssoc", Items); }

        public static class Properties
        {
	        /// <summary><para>versionnumber</para>
	        /// <para>versionnumber</para></summary>
	        public const string VersionNumber = "versionnumber";
	        /// <summary><para>nhs_raritysourceassociationid</para>
	        /// <para>nhs_raritysourceassociationid</para></summary>
	        public const string Nhs_raritysourceassociationid = "nhs_raritysourceassociationid";
	        /// <summary><para>nhs_antigensourceassociationid</para>
	        /// <para>nhs_antigensourceassociationid</para></summary>
	        public const string Nhs_antigensourceassociationid = "nhs_antigensourceassociationid";
	        /// <summary><para>nhs_anitensrcassoc_nhs_raritysrcassocid</para>
	        /// <para>nhs_anitensrcassoc_nhs_raritysrcassocid</para></summary>
	        public const string Nhs_AnitenSrcAssoc_nhs_RaritySrcAssocId = "nhs_anitensrcassoc_nhs_raritysrcassocid";
        }

    }
}
