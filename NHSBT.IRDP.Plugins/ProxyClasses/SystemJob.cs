// <auto-generated />

using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace NHSBT.IRDP.Plugins.ProxyClasses
{
    [EntityLogicalNameAttribute("asyncoperation")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    [DataContract(Name = "Entity", Namespace = "http://schemas.microsoft.com/xrm/2011/Contracts")]
    public partial class SystemJob : BaseProxyClass
    {
        public new const string LogicalName = "asyncoperation";
        public const int ObjectTypeCode = 4700;
        public const string PrimaryIdAttribute = "asyncoperationid";
        public const string PrimaryNameAttribute = "name";
        
        static SystemJob()
        {
            BaseProxyClass.RegisterProxyType(typeof(SystemJob), "asyncoperation");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public SystemJob() : base(new Entity("asyncoperation")) { }
        public SystemJob(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<SystemJob>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: regardingobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjecttypecode")]
public string RegardingObjectTypeCode
{
	get { return this.GetPropertyValue<string>("regardingobjecttypecode"); }
	set { this.SetPropertyValue<string>("regardingobjecttypecode", value, "RegardingObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: regardingobjectidyominame</para>
///<para>Max Length: 500 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidyominame")]
public string RegardingObjectIdYomiName
{
	get { return this.GetPropertyValue<string>("regardingobjectidyominame"); }
	set { this.SetPropertyValue("regardingobjectidyominame", value, 500, "RegardingObjectIdYomiName"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: parentpluginexecutionid</para>
///</summary>
[AttributeLogicalNameAttribute("parentpluginexecutionid")]
public Guid ParentPluginExecutionId
{
	get { return this.GetPropertyValue<Guid>("parentpluginexecutionid"); }
	set { this.SetPropertyValue<Guid>("parentpluginexecutionid", value, "ParentPluginExecutionId"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: regardingobjectidname</para>
///<para>Max Length: 500 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidname")]
public string RegardingObjectIdName
{
	get { return this.GetPropertyValue<string>("regardingobjectidname"); }
	set { this.SetPropertyValue("regardingobjectidname", value, 500, "RegardingObjectIdName"); }
}
///<summary>
///<para>Logical Name: owningextensionidname</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owningextensionidname")]
public string OwningExtensionIdName
{
	get { return this.GetPropertyValue<string>("owningextensionidname"); }
	set { this.SetPropertyValue("owningextensionidname", value, 256, "OwningExtensionIdName"); }
}
///<summary>
///<para>Logical Name: owningextensiontypecode</para>
///</summary>
[AttributeLogicalNameAttribute("owningextensiontypecode")]
public string OwningExtensionTypeCode
{
	get { return this.GetPropertyValue<string>("owningextensiontypecode"); }
	set { this.SetPropertyValue<string>("owningextensiontypecode", value, "OwningExtensionTypeCode"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: workflowactivationidname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("workflowactivationidname")]
public string WorkflowActivationIdName
{
	get { return this.GetPropertyValue<string>("workflowactivationidname"); }
}
///<summary>
///<para>Logical Name: completedon</para>
///</summary>
[AttributeLogicalNameAttribute("completedon")]
public DateTime? CompletedOn
{
	get { return this.GetPropertyValue<DateTime?>("completedon"); }
}
///<summary>
///<para>Logical Name: correlationid</para>
///</summary>
[AttributeLogicalNameAttribute("correlationid")]
public Guid CorrelationId
{
	get { return this.GetPropertyValue<Guid>("correlationid"); }
	set { this.SetPropertyValue<Guid>("correlationid", value, "CorrelationId"); }
}
///<summary>
///<para>Logical Name: correlationupdatedtime</para>
///</summary>
[AttributeLogicalNameAttribute("correlationupdatedtime")]
public DateTime? CorrelationUpdatedTime
{
	get { return this.GetPropertyValue<DateTime?>("correlationupdatedtime"); }
	set { this.SetPropertyValue<DateTime?>("correlationupdatedtime", value, "CorrelationUpdatedTime"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: data</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("data")]
public string Data
{
	get { return this.GetPropertyValue<string>("data"); }
	set { this.SetPropertyValue("data", value, 1073741823, "Data"); }
}
///<summary>
///<para>Logical Name: dependencytoken</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("dependencytoken")]
public string DependencyToken
{
	get { return this.GetPropertyValue<string>("dependencytoken"); }
	set { this.SetPropertyValue("dependencytoken", value, 256, "DependencyToken"); }
}
///<summary>
///<para>Logical Name: depth</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("depth")]
public int? Depth
{
	get { return this.GetPropertyValue<int?>("depth"); }
	set { this.SetPropertyValue("depth", (int?)value, (int)0, (int)2147483647, "Depth"); }
}
///<summary>
///<para>Logical Name: errorcode</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("errorcode")]
public int? ErrorCode
{
	get { return this.GetPropertyValue<int?>("errorcode"); }
}
///<summary>
///<para>Logical Name: executiontimespan</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///<para>Precision: 2</para>
///</summary>
[AttributeLogicalNameAttribute("executiontimespan")]
public double? ExecutionTimeSpan
{
	get { return this.GetPropertyValue<double?>("executiontimespan"); }
}
///<summary>
///<para>Logical Name: expanderstarttime</para>
///</summary>
[AttributeLogicalNameAttribute("expanderstarttime")]
public DateTime? ExpanderStartTime
{
	get { return this.GetPropertyValue<DateTime?>("expanderstarttime"); }
	set { this.SetPropertyValue<DateTime?>("expanderstarttime", value, "ExpanderStartTime"); }
}
///<summary>
///<para>Logical Name: friendlymessage</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("friendlymessage")]
public string FriendlyMessage
{
	get { return this.GetPropertyValue<string>("friendlymessage"); }
	set { this.SetPropertyValue("friendlymessage", value, 100000, "FriendlyMessage"); }
}
///<summary>
///<para>Logical Name: hostid</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("hostid")]
public string Host
{
	get { return this.GetPropertyValue<string>("hostid"); }
	set { this.SetPropertyValue("hostid", value, 256, "Host"); }
}
///<summary>
///<para>Logical Name: message</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("message")]
public string Message
{
	get { return this.GetPropertyValue<string>("message"); }
}
///<summary>
///<para>Logical Name: messagename</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("messagename")]
public string MessageName
{
	get { return this.GetPropertyValue<string>("messagename"); }
	set { this.SetPropertyValue("messagename", value, 160, "MessageName"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningextensionid</para>
///</summary>
[AttributeLogicalNameAttribute("owningextensionid")]
public EntityReference OwningExtension
{
	get { return this.GetPropertyValue<EntityReference>("owningextensionid"); }
	set { this.SetPropertyValue<EntityReference>("owningextensionid", value, "OwningExtension"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: postponeuntil</para>
///</summary>
[AttributeLogicalNameAttribute("postponeuntil")]
public DateTime? PostponeUntil
{
	get { return this.GetPropertyValue<DateTime?>("postponeuntil"); }
	set { this.SetPropertyValue<DateTime?>("postponeuntil", value, "PostponeUntil"); }
}
///<summary>
///<para>Logical Name: primaryentitytype</para>
///</summary>
[AttributeLogicalNameAttribute("primaryentitytype")]
public string PrimaryEntityType
{
	get { return this.GetPropertyValue<string>("primaryentitytype"); }
	set { this.SetPropertyValue<string>("primaryentitytype", value, "PrimaryEntityType"); }
}
///<summary>
///<para>Logical Name: recurrencepattern</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("recurrencepattern")]
public string RecurrencePattern
{
	get { return this.GetPropertyValue<string>("recurrencepattern"); }
	set { this.SetPropertyValue("recurrencepattern", value, 256, "RecurrencePattern"); }
}
///<summary>
///<para>Logical Name: recurrencestarttime</para>
///</summary>
[AttributeLogicalNameAttribute("recurrencestarttime")]
public DateTime? RecurrenceStart
{
	get { return this.GetPropertyValue<DateTime?>("recurrencestarttime"); }
	set { this.SetPropertyValue<DateTime?>("recurrencestarttime", value, "RecurrenceStart"); }
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference Regarding
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
	set { this.SetPropertyValue<EntityReference>("regardingobjectid", value, "Regarding"); }
}
///<summary>
///<para>Logical Name: requestid</para>
///</summary>
[AttributeLogicalNameAttribute("requestid")]
public Guid Request
{
	get { return this.GetPropertyValue<Guid>("requestid"); }
	set { this.SetPropertyValue<Guid>("requestid", value, "Request"); }
}
///<summary>
///<para>Logical Name: retrycount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("retrycount")]
public int? RetryCount
{
	get { return this.GetPropertyValue<int?>("retrycount"); }
}
///<summary>
///<para>Logical Name: rootexecutioncontext</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("rootexecutioncontext")]
public string RootExecutionContext
{
	get { return this.GetPropertyValue<string>("rootexecutioncontext"); }
	set { this.SetPropertyValue("rootexecutioncontext", value, 1073741823, "RootExecutionContext"); }
}
///<summary>
///<para>Logical Name: sequence</para>
///</summary>
[AttributeLogicalNameAttribute("sequence")]
public int? Sequence
{
	get { return this.GetPropertyValue<int?>("sequence"); }
}
///<summary>
///<para>Logical Name: startedon</para>
///</summary>
[AttributeLogicalNameAttribute("startedon")]
public DateTime? StartedOn
{
	get { return this.GetPropertyValue<DateTime?>("startedon"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: subtype</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 255</para>
///</summary>
[AttributeLogicalNameAttribute("subtype")]
public int? Subtype
{
	get { return this.GetPropertyValue<int?>("subtype"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: asyncoperationid</para>
///</summary>
[AttributeLogicalNameAttribute("asyncoperationid")]
public Guid SystemJobId
{
	get
	{
		return base.Id;
	}
	set
	{
		base.Id = value;
		base.SetPropertyValue("asyncoperationid", value, "SystemJobId");
	}
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string SystemJobName
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 256, "SystemJobName"); }
}
/// <summary>
///Logical Name: operationtype
/// </summary>
[AttributeLogicalNameAttribute("operationtype")]
public eSystemJobType? SystemJobType
{
	get
	{
		if (SystemJobType_OptionSetValue != null) { return (eSystemJobType)SystemJobType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.SystemJobType_OptionSetValue = new OptionSetValue((int)value); }
		else this.SystemJobType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: operationtype</para>
///</summary>
[AttributeLogicalNameAttribute("operationtype")]
public OptionSetValue SystemJobType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("operationtype"); }
	set { this.SetPropertyValue<OptionSetValue>("operationtype", value, "SystemJobType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string SystemJobType_Text(IOrganizationService Service)
{
	return this.SystemJobType_OptionSetValue.GetOptionSetText(Service, this, "operationtype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string SystemJobType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.SystemJobType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: iswaitingforevent</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("iswaitingforevent")]
public bool? WaitingForEvent
{
	get { return this.GetPropertyValue<bool?>("iswaitingforevent"); }
}
///<summary>
///<para>Logical Name: workflowactivationid</para>
///</summary>
[AttributeLogicalNameAttribute("workflowactivationid")]
public EntityReference WorkflowActivationId
{
	get { return this.GetPropertyValue<EntityReference>("workflowactivationid"); }
	set { this.SetPropertyValue<EntityReference>("workflowactivationid", value, "WorkflowActivationId"); }
}
///<summary>
///<para>Logical Name: workflowisblocked</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("workflowisblocked")]
public bool? WorkflowIsBlocked
{
	get { return this.GetPropertyValue<bool?>("workflowisblocked"); }
}
///<summary>
///<para>Logical Name: workflowstagename</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("workflowstagename")]
public string WorkflowStage
{
	get { return this.GetPropertyValue<string>("workflowstagename"); }
}
///<summary>
///<para>Logical Name: workflowstate</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("workflowstate")]
public string WorkflowState
{
	get { return this.GetPropertyValue<string>("workflowstate"); }
}
///<summary>
///<para>Logical Name: workload</para>
///<para>Max Length: 64 characters</para>
///</summary>
[AttributeLogicalNameAttribute("workload")]
public string Workload
{
	get { return this.GetPropertyValue<string>("workload"); }
	set { this.SetPropertyValue("workload", value, 64, "Workload"); }
}


        /// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: AsyncOperation_BulkDeleteOperation</para>
/// </summary>
public List<Entity> GetBulkDeleteOperations (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "bulkdeleteoperation", "asyncoperationid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: AsyncOperation_BulkDeleteOperation</para>
/// </summary>
public List<Entity> GetBulkDeleteOperations (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "bulkdeleteoperation", "asyncoperationid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: AsyncOperation_DuplicateBaseRecord</para>
/// </summary>
public List<Entity> GetDuplicateRecords (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "asyncoperationid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: AsyncOperation_DuplicateBaseRecord</para>
/// </summary>
public List<Entity> GetDuplicateRecords (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "asyncoperationid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: AsyncOperation_Emails</para>
/// </summary>
public List<Entity> GetEmailMessages (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "email", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: AsyncOperation_Emails</para>
/// </summary>
public List<Entity> GetEmailMessages (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "email", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: AsyncOperation_MailboxTrackingFolder</para>
/// </summary>
public List<Entity> GetMailboxAutoTrackingFolders (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: AsyncOperation_MailboxTrackingFolder</para>
/// </summary>
public List<Entity> GetMailboxAutoTrackingFolders (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "mailboxtrackingfolder", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: AsyncOperation_SocialActivities</para>
/// </summary>
public List<Entity> GetSocialActivities (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "socialactivity", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: AsyncOperation_SocialActivities</para>
/// </summary>
public List<Entity> GetSocialActivities (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "socialactivity", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: userentityinstancedata_asyncoperation</para>
/// </summary>
public List<Entity> GetUserEntityInstanceData (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: userentityinstancedata_asyncoperation</para>
/// </summary>
public List<Entity> GetUserEntityInstanceData (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: lk_workflowlog_asyncoperation_childworkflow</para>
/// </summary>
public List<Entity> GetProcessLogs (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "workflowlog", "childworkflowinstanceid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: lk_workflowlog_asyncoperation_childworkflow</para>
/// </summary>
public List<Entity> GetProcessLogs (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "workflowlog", "childworkflowinstanceid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: lk_workflowlog_asyncoperations</para>
/// </summary>
public List<Entity> GetProcessLogs2 (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "workflowlog", "asyncoperationid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: lk_workflowlog_asyncoperations</para>
/// </summary>
public List<Entity> GetProcessLogs2 (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "workflowlog", "asyncoperationid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: asyncoperation_workflowwaitsubscription</para>
/// </summary>
public List<Entity> GetWorkflowWaitSubscriptions (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "workflowwaitsubscription", "asyncoperationid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: asyncoperation_workflowwaitsubscription</para>
/// </summary>
public List<Entity> GetWorkflowWaitSubscriptions (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "workflowwaitsubscription", "asyncoperationid", Columns); }


        

        

        public enum eStatus
{
	///<summary><para>Ready</para>
	///<para>Value = 0</para></summary>
	[Description("Ready")]
	Ready = 0, 
	///<summary><para>Suspended</para>
	///<para>Value = 1</para></summary>
	[Description("Suspended")]
	Suspended = 1, 
	///<summary><para>Locked</para>
	///<para>Value = 2</para></summary>
	[Description("Locked")]
	Locked = 2, 
	///<summary><para>Completed</para>
	///<para>Value = 3</para></summary>
	[Description("Completed")]
	Completed = 3
}
public enum eStatusReason
{
	///<summary><para>Waiting For Resources</para>
	///<para>Value = 0</para></summary>
	[Description("Waiting For Resources")]
	WaitingForResources_Ready = 0, 
	///<summary><para>Waiting</para>
	///<para>Value = 10</para></summary>
	[Description("Waiting")]
	Waiting_Suspended = 10, 
	///<summary><para>In Progress</para>
	///<para>Value = 20</para></summary>
	[Description("In Progress")]
	InProgress_Locked = 20, 
	///<summary><para>Pausing</para>
	///<para>Value = 21</para></summary>
	[Description("Pausing")]
	Pausing_Locked = 21, 
	///<summary><para>Canceling</para>
	///<para>Value = 22</para></summary>
	[Description("Canceling")]
	Canceling_Locked = 22, 
	///<summary><para>Succeeded</para>
	///<para>Value = 30</para></summary>
	[Description("Succeeded")]
	Succeeded_Completed = 30, 
	///<summary><para>Failed</para>
	///<para>Value = 31</para></summary>
	[Description("Failed")]
	Failed_Completed = 31, 
	///<summary><para>Canceled</para>
	///<para>Value = 32</para></summary>
	[Description("Canceled")]
	Canceled_Completed = 32
}
public enum eSystemJobType
{
	///<summary><para>System Event</para>
	///<para>Value = 1</para></summary>
	[Description("System Event")]
	SystemEvent = 1, 
	///<summary><para>Bulk Email</para>
	///<para>Value = 2</para></summary>
	[Description("Bulk Email")]
	BulkEmail = 2, 
	///<summary><para>Import File Parse</para>
	///<para>Value = 3</para></summary>
	[Description("Import File Parse")]
	ImportFileParse = 3, 
	///<summary><para>Transform Parse Data</para>
	///<para>Value = 4</para></summary>
	[Description("Transform Parse Data")]
	TransformParseData = 4, 
	///<summary><para>Import</para>
	///<para>Value = 5</para></summary>
	[Description("Import")]
	Import = 5, 
	///<summary><para>Activity Propagation</para>
	///<para>Value = 6</para></summary>
	[Description("Activity Propagation")]
	ActivityPropagation = 6, 
	///<summary><para>Duplicate Detection Rule Publish</para>
	///<para>Value = 7</para></summary>
	[Description("Duplicate Detection Rule Publish")]
	DuplicateDetectionRulePublish = 7, 
	///<summary><para>Bulk Duplicate Detection</para>
	///<para>Value = 8</para></summary>
	[Description("Bulk Duplicate Detection")]
	BulkDuplicateDetection = 8, 
	///<summary><para>SQM Data Collection</para>
	///<para>Value = 9</para></summary>
	[Description("SQM Data Collection")]
	SQMDataCollection = 9, 
	///<summary><para>Workflow</para>
	///<para>Value = 10</para></summary>
	[Description("Workflow")]
	Workflow = 10, 
	///<summary><para>Quick Campaign</para>
	///<para>Value = 11</para></summary>
	[Description("Quick Campaign")]
	QuickCampaign = 11, 
	///<summary><para>Matchcode Update</para>
	///<para>Value = 12</para></summary>
	[Description("Matchcode Update")]
	MatchcodeUpdate = 12, 
	///<summary><para>Bulk Delete</para>
	///<para>Value = 13</para></summary>
	[Description("Bulk Delete")]
	BulkDelete = 13, 
	///<summary><para>Deletion Service</para>
	///<para>Value = 14</para></summary>
	[Description("Deletion Service")]
	DeletionService = 14, 
	///<summary><para>Index Management</para>
	///<para>Value = 15</para></summary>
	[Description("Index Management")]
	IndexManagement = 15, 
	///<summary><para>Collect Organization Statistics</para>
	///<para>Value = 16</para></summary>
	[Description("Collect Organization Statistics")]
	CollectOrganizationStatistics = 16, 
	///<summary><para>Import Subprocess</para>
	///<para>Value = 17</para></summary>
	[Description("Import Subprocess")]
	ImportSubprocess = 17, 
	///<summary><para>Calculate Organization Storage Size</para>
	///<para>Value = 18</para></summary>
	[Description("Calculate Organization Storage Size")]
	CalculateOrganizationStorageSize = 18, 
	///<summary><para>Collect Organization Database Statistics</para>
	///<para>Value = 19</para></summary>
	[Description("Collect Organization Database Statistics")]
	CollectOrganizationDatabaseStatistics = 19, 
	///<summary><para>Collection Organization Size Statistics</para>
	///<para>Value = 20</para></summary>
	[Description("Collection Organization Size Statistics")]
	CollectionOrganizationSizeStatistics = 20, 
	///<summary><para>Database Tuning</para>
	///<para>Value = 21</para></summary>
	[Description("Database Tuning")]
	DatabaseTuning = 21, 
	///<summary><para>Calculate Organization Maximum Storage Size</para>
	///<para>Value = 22</para></summary>
	[Description("Calculate Organization Maximum Storage Size")]
	CalculateOrganizationMaximumStorageSize = 22, 
	///<summary><para>Bulk Delete Subprocess</para>
	///<para>Value = 23</para></summary>
	[Description("Bulk Delete Subprocess")]
	BulkDeleteSubprocess = 23, 
	///<summary><para>Update Statistic Intervals</para>
	///<para>Value = 24</para></summary>
	[Description("Update Statistic Intervals")]
	UpdateStatisticIntervals = 24, 
	///<summary><para>Organization Full Text Catalog Index</para>
	///<para>Value = 25</para></summary>
	[Description("Organization Full Text Catalog Index")]
	OrganizationFullTextCatalogIndex = 25, 
	///<summary><para>Database log backup</para>
	///<para>Value = 26</para></summary>
	[Description("Database log backup")]
	DatabaseLogBackup = 26, 
	///<summary><para>Update Contract States</para>
	///<para>Value = 27</para></summary>
	[Description("Update Contract States")]
	UpdateContractStates = 27, 
	///<summary><para>DBCC SHRINKDATABASE maintenance job</para>
	///<para>Value = 28</para></summary>
	[Description("DBCC SHRINKDATABASE maintenance job")]
	DBCCSHRINKDATABASEMaintenanceJob = 28, 
	///<summary><para>DBCC SHRINKFILE maintenance job</para>
	///<para>Value = 29</para></summary>
	[Description("DBCC SHRINKFILE maintenance job")]
	DBCCSHRINKFILEMaintenanceJob = 29, 
	///<summary><para>Reindex all indices maintenance job</para>
	///<para>Value = 30</para></summary>
	[Description("Reindex all indices maintenance job")]
	ReindexAllIndicesMaintenanceJob = 30, 
	///<summary><para>Storage Limit Notification</para>
	///<para>Value = 31</para></summary>
	[Description("Storage Limit Notification")]
	StorageLimitNotification = 31, 
	///<summary><para>Cleanup inactive workflow assemblies</para>
	///<para>Value = 32</para></summary>
	[Description("Cleanup inactive workflow assemblies")]
	CleanupInactiveWorkflowAssemblies = 32, 
	///<summary><para>Recurring Series Expansion</para>
	///<para>Value = 35</para></summary>
	[Description("Recurring Series Expansion")]
	RecurringSeriesExpansion = 35, 
	///<summary><para>Import Sample Data</para>
	///<para>Value = 38</para></summary>
	[Description("Import Sample Data")]
	ImportSampleData = 38, 
	///<summary><para>Goal Roll Up</para>
	///<para>Value = 40</para></summary>
	[Description("Goal Roll Up")]
	GoalRollUp = 40, 
	///<summary><para>Audit Partition Creation</para>
	///<para>Value = 41</para></summary>
	[Description("Audit Partition Creation")]
	AuditPartitionCreation = 41, 
	///<summary><para>Check For Language Pack Updates</para>
	///<para>Value = 42</para></summary>
	[Description("Check For Language Pack Updates")]
	CheckForLanguagePackUpdates = 42, 
	///<summary><para>Provision Language Pack</para>
	///<para>Value = 43</para></summary>
	[Description("Provision Language Pack")]
	ProvisionLanguagePack = 43, 
	///<summary><para>Update Organization Database</para>
	///<para>Value = 44</para></summary>
	[Description("Update Organization Database")]
	UpdateOrganizationDatabase = 44, 
	///<summary><para>Update Solution</para>
	///<para>Value = 45</para></summary>
	[Description("Update Solution")]
	UpdateSolution = 45, 
	///<summary><para>Regenerate Entity Row Count Snapshot Data</para>
	///<para>Value = 46</para></summary>
	[Description("Regenerate Entity Row Count Snapshot Data")]
	RegenerateEntityRowCountSnapshotData = 46, 
	///<summary><para>Regenerate Read Share Snapshot Data</para>
	///<para>Value = 47</para></summary>
	[Description("Regenerate Read Share Snapshot Data")]
	RegenerateReadShareSnapshotData = 47, 
	///<summary><para>Outgoing Activity</para>
	///<para>Value = 50</para></summary>
	[Description("Outgoing Activity")]
	OutgoingActivity = 50, 
	///<summary><para>Incoming Email Processing</para>
	///<para>Value = 51</para></summary>
	[Description("Incoming Email Processing")]
	IncomingEmailProcessing = 51, 
	///<summary><para>Mailbox Test Access</para>
	///<para>Value = 52</para></summary>
	[Description("Mailbox Test Access")]
	MailboxTestAccess = 52, 
	///<summary><para>Encryption Health Check</para>
	///<para>Value = 53</para></summary>
	[Description("Encryption Health Check")]
	EncryptionHealthCheck = 53, 
	///<summary><para>Execute Async Request</para>
	///<para>Value = 54</para></summary>
	[Description("Execute Async Request")]
	ExecuteAsyncRequest = 54, 
	///<summary><para>Post to Yammer</para>
	///<para>Value = 49</para></summary>
	[Description("Post to Yammer")]
	PostToYammer = 49, 
	///<summary><para>Update Entitlement States</para>
	///<para>Value = 56</para></summary>
	[Description("Update Entitlement States")]
	UpdateEntitlementStates = 56, 
	///<summary><para>Calculate Rollup Field</para>
	///<para>Value = 57</para></summary>
	[Description("Calculate Rollup Field")]
	CalculateRollupField = 57, 
	///<summary><para>Mass Calculate Rollup Field</para>
	///<para>Value = 58</para></summary>
	[Description("Mass Calculate Rollup Field")]
	MassCalculateRollupField = 58, 
	///<summary><para>Import Translation</para>
	///<para>Value = 59</para></summary>
	[Description("Import Translation")]
	ImportTranslation = 59, 
	///<summary><para>Convert Date And Time Behavior</para>
	///<para>Value = 62</para></summary>
	[Description("Convert Date And Time Behavior")]
	ConvertDateAndTimeBehavior = 62, 
	///<summary><para>EntityKey Index Creation</para>
	///<para>Value = 63</para></summary>
	[Description("EntityKey Index Creation")]
	EntityKeyIndexCreation = 63, 
	///<summary><para>Update Knowledge Article States</para>
	///<para>Value = 65</para></summary>
	[Description("Update Knowledge Article States")]
	UpdateKnowledgeArticleStates = 65, 
	///<summary><para>Resource Booking Sync</para>
	///<para>Value = 68</para></summary>
	[Description("Resource Booking Sync")]
	ResourceBookingSync = 68, 
	///<summary><para>Relationship Assistant Cards</para>
	///<para>Value = 69</para></summary>
	[Description("Relationship Assistant Cards")]
	RelationshipAssistantCards = 69, 
	///<summary><para>Cleanup Solution Components</para>
	///<para>Value = 71</para></summary>
	[Description("Cleanup Solution Components")]
	CleanupSolutionComponents = 71, 
	///<summary><para>App Module Metadata Operation</para>
	///<para>Value = 72</para></summary>
	[Description("App Module Metadata Operation")]
	AppModuleMetadataOperation = 72, 
	///<summary><para>ALM Anomaly Detection Operation</para>
	///<para>Value = 73</para></summary>
	[Description("ALM Anomaly Detection Operation")]
	ALMAnomalyDetectionOperation = 73, 
	///<summary><para>Flow Notification</para>
	///<para>Value = 75</para></summary>
	[Description("Flow Notification")]
	FlowNotification = 75, 
	///<summary><para>Ribbon Client Metadata Operation</para>
	///<para>Value = 76</para></summary>
	[Description("Ribbon Client Metadata Operation")]
	RibbonClientMetadataOperation = 76, 
	///<summary><para>CallbackRegistration Expander Operation</para>
	///<para>Value = 79</para></summary>
	[Description("CallbackRegistration Expander Operation")]
	CallbackRegistrationExpanderOperation = 79, 
	///<summary><para>CascadeAssign</para>
	///<para>Value = 90</para></summary>
	[Description("CascadeAssign")]
	CascadeAssign = 90, 
	///<summary><para>CascadeDelete</para>
	///<para>Value = 91</para></summary>
	[Description("CascadeDelete")]
	CascadeDelete = 91, 
	///<summary><para>Event Expander Operation</para>
	///<para>Value = 92</para></summary>
	[Description("Event Expander Operation")]
	EventExpanderOperation = 92, 
	///<summary><para>Import Solution Metadata</para>
	///<para>Value = 93</para></summary>
	[Description("Import Solution Metadata")]
	ImportSolutionMetadata = 93, 
	///<summary><para>Bulk Delete File Attachment</para>
	///<para>Value = 94</para></summary>
	[Description("Bulk Delete File Attachment")]
	BulkDeleteFileAttachment = 94, 
	///<summary><para>Refresh Business Unit for Records Owned By Principal</para>
	///<para>Value = 95</para></summary>
	[Description("Refresh Business Unit for Records Owned By Principal")]
	RefreshBusinessUnitForRecordsOwnedByPrincipal = 95, 
	///<summary><para>Revoke Inherited Access</para>
	///<para>Value = 96</para></summary>
	[Description("Revoke Inherited Access")]
	RevokeInheritedAccess = 96
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>utcconversiontimezonecode</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>timezoneruleversionnumber</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>regardingobjecttypecode</para>
	/// <para>regardingobjecttypecode</para></summary>
	public const string RegardingObjectTypeCode = "regardingobjecttypecode";
	/// <summary><para>regardingobjectidyominame</para>
	/// <para>regardingobjectidyominame</para></summary>
	public const string RegardingObjectIdYomiName = "regardingobjectidyominame";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>parentpluginexecutionid</para>
	/// <para>parentpluginexecutionid</para></summary>
	public const string ParentPluginExecutionId = "parentpluginexecutionid";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>regardingobjectidname</para>
	/// <para>regardingobjectidname</para></summary>
	public const string RegardingObjectIdName = "regardingobjectidname";
	/// <summary><para>owningextensionidname</para>
	/// <para>owningextensionidname</para></summary>
	public const string OwningExtensionIdName = "owningextensionidname";
	/// <summary><para>owningextensiontypecode</para>
	/// <para>owningextensiontypecode</para></summary>
	public const string OwningExtensionTypeCode = "owningextensiontypecode";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>workflowactivationidname</para>
	/// <para>workflowactivationidname</para></summary>
	public const string WorkflowActivationIdName = "workflowactivationidname";
	/// <summary><para>Completed On</para>
	/// <para>completedon</para></summary>
	public const string CompletedOn = "completedon";
	/// <summary><para>Correlation Id</para>
	/// <para>correlationid</para></summary>
	public const string CorrelationId = "correlationid";
	/// <summary><para>Correlation Updated Time</para>
	/// <para>correlationupdatedtime</para></summary>
	public const string CorrelationUpdatedTime = "correlationupdatedtime";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Data</para>
	/// <para>data</para></summary>
	public const string Data = "data";
	/// <summary><para>Dependency Token</para>
	/// <para>dependencytoken</para></summary>
	public const string DependencyToken = "dependencytoken";
	/// <summary><para>Depth</para>
	/// <para>depth</para></summary>
	public const string Depth = "depth";
	/// <summary><para>Error Code</para>
	/// <para>errorcode</para></summary>
	public const string ErrorCode = "errorcode";
	/// <summary><para>ExecutionTimeSpan</para>
	/// <para>executiontimespan</para></summary>
	public const string ExecutionTimeSpan = "executiontimespan";
	/// <summary><para>Expander Start Time</para>
	/// <para>expanderstarttime</para></summary>
	public const string ExpanderStartTime = "expanderstarttime";
	/// <summary><para>Friendly message</para>
	/// <para>friendlymessage</para></summary>
	public const string FriendlyMessage = "friendlymessage";
	/// <summary><para>Host</para>
	/// <para>hostid</para></summary>
	public const string Host = "hostid";
	/// <summary><para>Message</para>
	/// <para>message</para></summary>
	public const string Message = "message";
	/// <summary><para>Message Name</para>
	/// <para>messagename</para></summary>
	public const string MessageName = "messagename";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Extension</para>
	/// <para>owningextensionid</para></summary>
	public const string OwningExtension = "owningextensionid";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Postpone Until</para>
	/// <para>postponeuntil</para></summary>
	public const string PostponeUntil = "postponeuntil";
	/// <summary><para>Primary Entity Type</para>
	/// <para>primaryentitytype</para></summary>
	public const string PrimaryEntityType = "primaryentitytype";
	/// <summary><para>Recurrence Pattern</para>
	/// <para>recurrencepattern</para></summary>
	public const string RecurrencePattern = "recurrencepattern";
	/// <summary><para>Recurrence Start</para>
	/// <para>recurrencestarttime</para></summary>
	public const string RecurrenceStart = "recurrencestarttime";
	/// <summary><para>Regarding</para>
	/// <para>regardingobjectid</para></summary>
	public const string Regarding = "regardingobjectid";
	/// <summary><para>Request</para>
	/// <para>requestid</para></summary>
	public const string Request = "requestid";
	/// <summary><para>Retry Count</para>
	/// <para>retrycount</para></summary>
	public const string RetryCount = "retrycount";
	/// <summary><para>RootExecutionContext</para>
	/// <para>rootexecutioncontext</para></summary>
	public const string RootExecutionContext = "rootexecutioncontext";
	/// <summary><para>Sequence</para>
	/// <para>sequence</para></summary>
	public const string Sequence = "sequence";
	/// <summary><para>Started On</para>
	/// <para>startedon</para></summary>
	public const string StartedOn = "startedon";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Subtype</para>
	/// <para>subtype</para></summary>
	public const string Subtype = "subtype";
	/// <summary><para>System Job</para>
	/// <para>asyncoperationid</para></summary>
	public const string SystemJobId = "asyncoperationid";
	/// <summary><para>System Job Name</para>
	/// <para>name</para></summary>
	public const string SystemJobName = "name";
	/// <summary><para>System Job Type</para>
	/// <para>operationtype</para></summary>
	public const string SystemJobType = "operationtype";
	/// <summary><para>Waiting for Event</para>
	/// <para>iswaitingforevent</para></summary>
	public const string WaitingForEvent = "iswaitingforevent";
	/// <summary><para>Workflow Activation Id</para>
	/// <para>workflowactivationid</para></summary>
	public const string WorkflowActivationId = "workflowactivationid";
	/// <summary><para>Workflow Is Blocked</para>
	/// <para>workflowisblocked</para></summary>
	public const string WorkflowIsBlocked = "workflowisblocked";
	/// <summary><para>Workflow Stage</para>
	/// <para>workflowstagename</para></summary>
	public const string WorkflowStage = "workflowstagename";
	/// <summary><para>Workflow State</para>
	/// <para>workflowstate</para></summary>
	public const string WorkflowState = "workflowstate";
	/// <summary><para>Workload</para>
	/// <para>workload</para></summary>
	public const string Workload = "workload";
}

    }
}
