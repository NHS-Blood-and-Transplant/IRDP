// <auto-generated />

using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace NHSBT.IRDP.Plugins.ProxyClasses
{
    [EntityLogicalNameAttribute("task")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    [DataContract(Name = "Entity", Namespace = "http://schemas.microsoft.com/xrm/2011/Contracts")]
    public partial class Task : BaseProxyClass
    {
        public new const string LogicalName = "task";
        public const int ObjectTypeCode = 4212;
        public const string PrimaryIdAttribute = "activityid";
        public const string PrimaryNameAttribute = "subject";
        
        static Task()
        {
            BaseProxyClass.RegisterProxyType(typeof(Task), "task");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Task() : base(new Entity("task")) { }
        public Task(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Task>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: regardingobjectidyominame</para>
///<para>Max Length: 400 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidyominame")]
public string RegardingObjectIdYomiName
{
	get { return this.GetPropertyValue<string>("regardingobjectidyominame"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: regardingobjectidname</para>
///<para>Max Length: 400 characters</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectidname")]
public string RegardingObjectIdName
{
	get { return this.GetPropertyValue<string>("regardingobjectidname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: regardingobjecttypecode</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjecttypecode")]
public string RegardingObjectTypeCode
{
	get { return this.GetPropertyValue<string>("regardingobjecttypecode"); }
	set { this.SetPropertyValue<string>("regardingobjecttypecode", value, "RegardingObjectTypeCode"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: serviceidname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("serviceidname")]
public string ServiceIdName
{
	get { return this.GetPropertyValue<string>("serviceidname"); }
}
///<summary>
///<para>Logical Name: slainvokedidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("slainvokedidname")]
public string SLAInvokedIdName
{
	get { return this.GetPropertyValue<string>("slainvokedidname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: slaname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("slaname")]
public string SLAName
{
	get { return this.GetPropertyValue<string>("slaname"); }
}
///<summary>
///<para>Logical Name: stageid</para>
///</summary>
[AttributeLogicalNameAttribute("stageid")]
public Guid _Deprecated_ProcessStage
{
	get { return this.GetPropertyValue<Guid>("stageid"); }
	set { this.SetPropertyValue<Guid>("stageid", value, "_Deprecated_ProcessStage"); }
}
///<summary>
///<para>Logical Name: traversedpath</para>
///<para>Max Length: 1250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("traversedpath")]
public string _Deprecated_TraversedPath
{
	get { return this.GetPropertyValue<string>("traversedpath"); }
	set { this.SetPropertyValue("traversedpath", value, 1250, "_Deprecated_TraversedPath"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eActivityStatus? ActivityStatus
{
	get
	{
		if (ActivityStatus_OptionSetValue != null) { return (eActivityStatus)ActivityStatus_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ActivityStatus_OptionSetValue = new OptionSetValue((int)value); }
		else this.ActivityStatus_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue ActivityStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "ActivityStatus_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ActivityStatus_Text(IOrganizationService Service)
{
	return this.ActivityStatus_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ActivityStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ActivityStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: activitytypecode</para>
///</summary>
[AttributeLogicalNameAttribute("activitytypecode")]
public string ActivityType
{
	get { return this.GetPropertyValue<string>("activitytypecode"); }
}
///<summary>
///<para>Logical Name: actualend</para>
///</summary>
[AttributeLogicalNameAttribute("actualend")]
public DateTime? ActualEnd
{
	get { return this.GetPropertyValue<DateTime?>("actualend"); }
	set { this.SetPropertyValue<DateTime?>("actualend", value, "ActualEnd"); }
}
///<summary>
///<para>Logical Name: actualstart</para>
///</summary>
[AttributeLogicalNameAttribute("actualstart")]
public DateTime? ActualStart
{
	get { return this.GetPropertyValue<DateTime?>("actualstart"); }
	set { this.SetPropertyValue<DateTime?>("actualstart", value, "ActualStart"); }
}
///<summary>
///<para>Logical Name: activityadditionalparams</para>
///<para>Max Length: 8192 characters</para>
///</summary>
[AttributeLogicalNameAttribute("activityadditionalparams")]
public string AdditionalParameters
{
	get { return this.GetPropertyValue<string>("activityadditionalparams"); }
	set { this.SetPropertyValue("activityadditionalparams", value, 8192, "AdditionalParameters"); }
}
///<summary>
///<para>Logical Name: crmtaskassigneduniqueid</para>
///</summary>
[AttributeLogicalNameAttribute("crmtaskassigneduniqueid")]
public Guid AssignedTaskUniqueId
{
	get { return this.GetPropertyValue<Guid>("crmtaskassigneduniqueid"); }
	set { this.SetPropertyValue<Guid>("crmtaskassigneduniqueid", value, "AssignedTaskUniqueId"); }
}
///<summary>
///<para>Logical Name: category</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("category")]
public string Category
{
	get { return this.GetPropertyValue<string>("category"); }
	set { this.SetPropertyValue("category", value, 250, "Category"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: scheduledend</para>
///</summary>
[AttributeLogicalNameAttribute("scheduledend")]
public DateTime? DueDate
{
	get { return this.GetPropertyValue<DateTime?>("scheduledend"); }
	set { this.SetPropertyValue<DateTime?>("scheduledend", value, "DueDate"); }
}
///<summary>
///<para>Logical Name: actualdurationminutes</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("actualdurationminutes")]
public int? Duration
{
	get { return this.GetPropertyValue<int?>("actualdurationminutes"); }
	set { this.SetPropertyValue("actualdurationminutes", (int?)value, (int)0, (int)2147483647, "Duration"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: isbilled</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isbilled")]
public bool? IsBilled
{
	get { return this.GetPropertyValue<bool?>("isbilled"); }
	set { this.SetPropertyValue<bool?>("isbilled", value, "IsBilled"); }
}
///<summary>
///<para>Logical Name: isregularactivity</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isregularactivity")]
public bool? IsRegularActivity
{
	get { return this.GetPropertyValue<bool?>("isregularactivity"); }
}
///<summary>
///<para>Logical Name: isworkflowcreated</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isworkflowcreated")]
public bool? IsWorkflowCreated
{
	get { return this.GetPropertyValue<bool?>("isworkflowcreated"); }
	set { this.SetPropertyValue<bool?>("isworkflowcreated", value, "IsWorkflowCreated"); }
}
///<summary>
///<para>Logical Name: lastonholdtime</para>
///</summary>
[AttributeLogicalNameAttribute("lastonholdtime")]
public DateTime? LastOnHoldTime
{
	get { return this.GetPropertyValue<DateTime?>("lastonholdtime"); }
	set { this.SetPropertyValue<DateTime?>("lastonholdtime", value, "LastOnHoldTime"); }
}
///<summary>
///<para>Logical Name: slainvokedid</para>
///</summary>
[AttributeLogicalNameAttribute("slainvokedid")]
public EntityReference LastSLAApplied
{
	get { return this.GetPropertyValue<EntityReference>("slainvokedid"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: onholdtime</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("onholdtime")]
public int? OnHoldTime_Minutes
{
	get { return this.GetPropertyValue<int?>("onholdtime"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: percentcomplete</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 100</para>
///</summary>
[AttributeLogicalNameAttribute("percentcomplete")]
public int? PercentComplete
{
	get { return this.GetPropertyValue<int?>("percentcomplete"); }
	set { this.SetPropertyValue("percentcomplete", (int?)value, (int)0, (int)100, "PercentComplete"); }
}
/// <summary>
///Logical Name: prioritycode
/// </summary>
[AttributeLogicalNameAttribute("prioritycode")]
public ePriority? Priority
{
	get
	{
		if (Priority_OptionSetValue != null) { return (ePriority)Priority_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Priority_OptionSetValue = new OptionSetValue((int)value); }
		else this.Priority_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: prioritycode</para>
///</summary>
[AttributeLogicalNameAttribute("prioritycode")]
public OptionSetValue Priority_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("prioritycode"); }
	set { this.SetPropertyValue<OptionSetValue>("prioritycode", value, "Priority_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Priority_Text(IOrganizationService Service)
{
	return this.Priority_OptionSetValue.GetOptionSetText(Service, this, "prioritycode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Priority_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Priority_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: processid</para>
///</summary>
[AttributeLogicalNameAttribute("processid")]
public Guid Process
{
	get { return this.GetPropertyValue<Guid>("processid"); }
	set { this.SetPropertyValue<Guid>("processid", value, "Process"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
///<summary>
///<para>Logical Name: regardingobjectid</para>
///</summary>
[AttributeLogicalNameAttribute("regardingobjectid")]
public EntityReference Regarding
{
	get { return this.GetPropertyValue<EntityReference>("regardingobjectid"); }
	set { this.SetPropertyValue<EntityReference>("regardingobjectid", value, "Regarding"); }
}
///<summary>
///<para>Logical Name: scheduleddurationminutes</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("scheduleddurationminutes")]
public int? ScheduledDuration
{
	get { return this.GetPropertyValue<int?>("scheduleddurationminutes"); }
}
///<summary>
///<para>Logical Name: serviceid</para>
///</summary>
[AttributeLogicalNameAttribute("serviceid")]
public EntityReference Service
{
	get { return this.GetPropertyValue<EntityReference>("serviceid"); }
	set { this.SetPropertyValue<EntityReference>("serviceid", value, "Service"); }
}
///<summary>
///<para>Logical Name: slaid</para>
///</summary>
[AttributeLogicalNameAttribute("slaid")]
public EntityReference SLA
{
	get { return this.GetPropertyValue<EntityReference>("slaid"); }
	set { this.SetPropertyValue<EntityReference>("slaid", value, "SLA"); }
}
///<summary>
///<para>Logical Name: sortdate</para>
///</summary>
[AttributeLogicalNameAttribute("sortdate")]
public DateTime? SortDate
{
	get { return this.GetPropertyValue<DateTime?>("sortdate"); }
	set { this.SetPropertyValue<DateTime?>("sortdate", value, "SortDate"); }
}
///<summary>
///<para>Logical Name: scheduledstart</para>
///</summary>
[AttributeLogicalNameAttribute("scheduledstart")]
public DateTime? StartDate
{
	get { return this.GetPropertyValue<DateTime?>("scheduledstart"); }
	set { this.SetPropertyValue<DateTime?>("scheduledstart", value, "StartDate"); }
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: subcategory</para>
///<para>Max Length: 250 characters</para>
///</summary>
[AttributeLogicalNameAttribute("subcategory")]
public string Sub_Category
{
	get { return this.GetPropertyValue<string>("subcategory"); }
	set { this.SetPropertyValue("subcategory", value, 250, "Sub_Category"); }
}
///<summary>
///<para>Logical Name: subject</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("subject")]
public string Subject
{
	get { return this.GetPropertyValue<string>("subject"); }
	set { this.SetPropertyValue("subject", value, 200, "Subject"); }
}
///<summary>
///<para>Logical Name: subscriptionid</para>
///</summary>
[AttributeLogicalNameAttribute("subscriptionid")]
public Guid Subscription
{
	get { return this.GetPropertyValue<Guid>("subscriptionid"); }
	set { this.SetPropertyValue<Guid>("subscriptionid", value, "Subscription"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: activityid</para>
///</summary>
[AttributeLogicalNameAttribute("activityid")]
public Guid TaskId
{
	get
	{
		return base.Id;
	}
	set
	{
		base.Id = value;
		base.SetPropertyValue("activityid", value, "TaskId");
	}
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        /// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_actioncard</para>
/// </summary>
public List<Entity> GetActionCards (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "actioncard", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_actioncard</para>
/// </summary>
public List<Entity> GetActionCards (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "actioncard", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_activity_parties</para>
/// </summary>
public List<Entity> GetActivityParties (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "activityparty", "activityid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_activity_parties</para>
/// </summary>
public List<Entity> GetActivityParties (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "activityparty", "activityid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Task_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Note (Regarding)</b></para>
/// <para>Schema Name: Task_Annotation</para>
/// </summary>
public List<Note> GetNotes_Regarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Note>(Service, this.Id, "annotation", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Task_AsyncOperations</para>
/// </summary>
public List<Entity> GetSystemJobs (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Task_AsyncOperations</para>
/// </summary>
public List<Entity> GetSystemJobs (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Task_BulkDeleteFailures</para>
/// </summary>
public List<Entity> GetBulkDeleteFailures (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Task_BulkDeleteFailures</para>
/// </summary>
public List<Entity> GetBulkDeleteFailures (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_connections1</para>
/// </summary>
public List<Entity> GetConnections (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_connections1</para>
/// </summary>
public List<Entity> GetConnections (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "connection", "record1id", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_connections2</para>
/// </summary>
public List<Entity> GetConnections2 (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_connections2</para>
/// </summary>
public List<Entity> GetConnections2 (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "connection", "record2id", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Task_DuplicateBaseRecord</para>
/// </summary>
public List<Entity> GetDuplicateRecords (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Task_DuplicateBaseRecord</para>
/// </summary>
public List<Entity> GetDuplicateRecords (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Task_DuplicateMatchingRecord</para>
/// </summary>
public List<Entity> GetDuplicateRecords2 (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Task_DuplicateMatchingRecord</para>
/// </summary>
public List<Entity> GetDuplicateRecords2 (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_PostFollows</para>
/// </summary>
public List<Entity> GetFollows (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "postfollow", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_PostFollows</para>
/// </summary>
public List<Entity> GetFollows (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "postfollow", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_PostRegardings</para>
/// </summary>
public List<Entity> GetPostRegarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "postregarding", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_PostRegardings</para>
/// </summary>
public List<Entity> GetPostRegarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "postregarding", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_PostRoles</para>
/// </summary>
public List<Entity> GetPostRoles (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "postrole", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_PostRoles</para>
/// </summary>
public List<Entity> GetPostRoles (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "postrole", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_principalobjectattributeaccess</para>
/// </summary>
public List<Entity> GetFieldSharing (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: task_principalobjectattributeaccess</para>
/// </summary>
public List<Entity> GetFieldSharing (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Task_ProcessSessions</para>
/// </summary>
public List<Entity> GetProcessSessions (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Task_ProcessSessions</para>
/// </summary>
public List<Entity> GetProcessSessions (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>QueueItem (Object)</b></para>
/// <para>Schema Name: Task_QueueItem</para>
/// </summary>
public List<QueueItem> GetQueueItems_Object (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QueueItem>(Service, this.Id, "queueitem", "objectid", Columns); }
/// <summary>
/// <para><b>QueueItem (Object)</b></para>
/// <para>Schema Name: Task_QueueItem</para>
/// </summary>
public List<QueueItem> GetQueueItems_Object (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QueueItem>(Service, this.Id, "queueitem", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: slakpiinstance_task</para>
/// </summary>
public List<Entity> GetSLAKPIInstances (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "slakpiinstance", "regarding", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: slakpiinstance_task</para>
/// </summary>
public List<Entity> GetSLAKPIInstances (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "slakpiinstance", "regarding", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Task_SyncErrors</para>
/// </summary>
public List<Entity> GetSyncErrors (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Task_SyncErrors</para>
/// </summary>
public List<Entity> GetSyncErrors (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: userentityinstancedata_task</para>
/// </summary>
public List<Entity> GetUserEntityInstanceData (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: userentityinstancedata_task</para>
/// </summary>
public List<Entity> GetUserEntityInstanceData (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        /// <summary>
/// <para>Related Entity: <b>Subscription</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: task_subscription_association</para>
/// </summary>
public List<Entity> GetSubscriptions (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities(Service, this, "task", "activityid", "subscription", "subscriptionid", "subscriptionmanuallytrackedobject", "objectid", "subscriptionid", Columns); }
public List<Entity> GetSubscriptions (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities(Service, this, "task", "activityid", "subscription", "subscriptionid", "subscriptionmanuallytrackedobject", "objectid", "subscriptionid", Columns); }
public void RelateSubscriptions (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "task_subscription_association", Items); }
public void RelateSubscriptions (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "task_subscription_association", Items); }
public void UnRelateSubscriptions (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "task_subscription_association", Items); }
public void UnRelateSubscriptions (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "task_subscription_association", Items); }


        

        public enum eActivityStatus
{
	///<summary><para>Open</para>
	///<para>Value = 0</para></summary>
	[Description("Open")]
	Open = 0, 
	///<summary><para>Completed</para>
	///<para>Value = 1</para></summary>
	[Description("Completed")]
	Completed = 1, 
	///<summary><para>Canceled</para>
	///<para>Value = 2</para></summary>
	[Description("Canceled")]
	Canceled = 2
}
public enum ePriority
{
	///<summary><para>Low</para>
	///<para>Value = 0</para></summary>
	[Description("Low")]
	Low = 0, 
	///<summary><para>Normal</para>
	///<para>Value = 1</para></summary>
	[Description("Normal")]
	Normal = 1, 
	///<summary><para>High</para>
	///<para>Value = 2</para></summary>
	[Description("High")]
	High = 2
}
public enum eStatusReason
{
	///<summary><para>Not Started</para>
	///<para>Value = 2</para></summary>
	[Description("Not Started")]
	NotStarted_Open = 2, 
	///<summary><para>In Progress</para>
	///<para>Value = 3</para></summary>
	[Description("In Progress")]
	InProgress_Open = 3, 
	///<summary><para>Waiting on someone else</para>
	///<para>Value = 4</para></summary>
	[Description("Waiting on someone else")]
	WaitingOnSomeoneElse_Open = 4, 
	///<summary><para>Completed</para>
	///<para>Value = 5</para></summary>
	[Description("Completed")]
	Completed_Completed = 5, 
	///<summary><para>Canceled</para>
	///<para>Value = 6</para></summary>
	[Description("Canceled")]
	Canceled_Canceled = 6, 
	///<summary><para>Deferred</para>
	///<para>Value = 7</para></summary>
	[Description("Deferred")]
	Deferred_Open = 7
}
public void SetState(IOrganizationService Service, eActivityStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eActivityStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>regardingobjectidyominame</para>
	/// <para>regardingobjectidyominame</para></summary>
	public const string RegardingObjectIdYomiName = "regardingobjectidyominame";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>regardingobjectidname</para>
	/// <para>regardingobjectidname</para></summary>
	public const string RegardingObjectIdName = "regardingobjectidname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>regardingobjecttypecode</para>
	/// <para>regardingobjecttypecode</para></summary>
	public const string RegardingObjectTypeCode = "regardingobjecttypecode";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>serviceidname</para>
	/// <para>serviceidname</para></summary>
	public const string ServiceIdName = "serviceidname";
	/// <summary><para>slainvokedidname</para>
	/// <para>slainvokedidname</para></summary>
	public const string SLAInvokedIdName = "slainvokedidname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>slaname</para>
	/// <para>slaname</para></summary>
	public const string SLAName = "slaname";
	/// <summary><para>(Deprecated) Process Stage</para>
	/// <para>stageid</para></summary>
	public const string _Deprecated_ProcessStage = "stageid";
	/// <summary><para>(Deprecated) Traversed Path</para>
	/// <para>traversedpath</para></summary>
	public const string _Deprecated_TraversedPath = "traversedpath";
	/// <summary><para>Activity Status</para>
	/// <para>statecode</para></summary>
	public const string ActivityStatus = "statecode";
	/// <summary><para>Activity Type</para>
	/// <para>activitytypecode</para></summary>
	public const string ActivityType = "activitytypecode";
	/// <summary><para>Actual End</para>
	/// <para>actualend</para></summary>
	public const string ActualEnd = "actualend";
	/// <summary><para>Actual Start</para>
	/// <para>actualstart</para></summary>
	public const string ActualStart = "actualstart";
	/// <summary><para>Additional Parameters</para>
	/// <para>activityadditionalparams</para></summary>
	public const string AdditionalParameters = "activityadditionalparams";
	/// <summary><para>Assigned Task Unique Id</para>
	/// <para>crmtaskassigneduniqueid</para></summary>
	public const string AssignedTaskUniqueId = "crmtaskassigneduniqueid";
	/// <summary><para>Category</para>
	/// <para>category</para></summary>
	public const string Category = "category";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Due Date</para>
	/// <para>scheduledend</para></summary>
	public const string DueDate = "scheduledend";
	/// <summary><para>Duration</para>
	/// <para>actualdurationminutes</para></summary>
	public const string Duration = "actualdurationminutes";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Is Billed</para>
	/// <para>isbilled</para></summary>
	public const string IsBilled = "isbilled";
	/// <summary><para>Is Regular Activity</para>
	/// <para>isregularactivity</para></summary>
	public const string IsRegularActivity = "isregularactivity";
	/// <summary><para>Is Workflow Created</para>
	/// <para>isworkflowcreated</para></summary>
	public const string IsWorkflowCreated = "isworkflowcreated";
	/// <summary><para>Last On Hold Time</para>
	/// <para>lastonholdtime</para></summary>
	public const string LastOnHoldTime = "lastonholdtime";
	/// <summary><para>Last SLA applied</para>
	/// <para>slainvokedid</para></summary>
	public const string LastSLAApplied = "slainvokedid";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>On Hold Time (Minutes)</para>
	/// <para>onholdtime</para></summary>
	public const string OnHoldTime_Minutes = "onholdtime";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Percent Complete</para>
	/// <para>percentcomplete</para></summary>
	public const string PercentComplete = "percentcomplete";
	/// <summary><para>Priority</para>
	/// <para>prioritycode</para></summary>
	public const string Priority = "prioritycode";
	/// <summary><para>Process</para>
	/// <para>processid</para></summary>
	public const string Process = "processid";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Regarding</para>
	/// <para>regardingobjectid</para></summary>
	public const string Regarding = "regardingobjectid";
	/// <summary><para>Scheduled Duration</para>
	/// <para>scheduleddurationminutes</para></summary>
	public const string ScheduledDuration = "scheduleddurationminutes";
	/// <summary><para>Service</para>
	/// <para>serviceid</para></summary>
	public const string Service = "serviceid";
	/// <summary><para>SLA</para>
	/// <para>slaid</para></summary>
	public const string SLA = "slaid";
	/// <summary><para>Sort Date</para>
	/// <para>sortdate</para></summary>
	public const string SortDate = "sortdate";
	/// <summary><para>Start Date</para>
	/// <para>scheduledstart</para></summary>
	public const string StartDate = "scheduledstart";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Sub-Category</para>
	/// <para>subcategory</para></summary>
	public const string Sub_Category = "subcategory";
	/// <summary><para>Subject</para>
	/// <para>subject</para></summary>
	public const string Subject = "subject";
	/// <summary><para>Subscription</para>
	/// <para>subscriptionid</para></summary>
	public const string Subscription = "subscriptionid";
	/// <summary><para>Task</para>
	/// <para>activityid</para></summary>
	public const string TaskId = "activityid";
	/// <summary><para>Time Zone Rule Version Number</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>UTC Conversion Time Zone Code</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
