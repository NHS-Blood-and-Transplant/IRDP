// <auto-generated />

using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace NHSBT.IRDP.Plugins.ProxyClasses
{
    [EntityLogicalNameAttribute("importfile")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    [DataContract(Name = "Entity", Namespace = "http://schemas.microsoft.com/xrm/2011/Contracts")]
    public partial class ImportSourceFile : BaseProxyClass
    {
        public new const string LogicalName = "importfile";
        public const int ObjectTypeCode = 4412;
        public const string PrimaryIdAttribute = "importfileid";
        public const string PrimaryNameAttribute = "name";
        
        static ImportSourceFile()
        {
            BaseProxyClass.RegisterProxyType(typeof(ImportSourceFile), "importfile");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public ImportSourceFile() : base(new Entity("importfile")) { }
        public ImportSourceFile(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<ImportSourceFile>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: importmapidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("importmapidname")]
public string ImportMapIdName
{
	get { return this.GetPropertyValue<string>("importmapidname"); }
}
///<summary>
///<para>Logical Name: timezoneruleversionnumber</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
public int? TimeZoneRuleVersionNumber
{
	get { return this.GetPropertyValue<int?>("timezoneruleversionnumber"); }
	set { this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: recordsowneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("recordsowneridtype")]
public string RecordsOwnerIdType
{
	get { return this.GetPropertyValue<string>("recordsowneridtype"); }
	set { this.SetPropertyValue<string>("recordsowneridtype", value, "RecordsOwnerIdType"); }
}
///<summary>
///<para>Logical Name: recordsowneridname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("recordsowneridname")]
public string RecordsOwnerIdName
{
	get { return this.GetPropertyValue<string>("recordsowneridname"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: utcconversiontimezonecode</para>
///<para>Minimum Value: -1</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
public int? UTCConversionTimeZoneCode
{
	get { return this.GetPropertyValue<int?>("utcconversiontimezonecode"); }
	set { this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: content</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("content")]
public string Content
{
	get { return this.GetPropertyValue<string>("content"); }
	set { this.SetPropertyValue("content", value, 1073741823, "Content"); }
}
///<summary>
///<para>Logical Name: relatedentitycolumns</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("relatedentitycolumns")]
public string RelatedEntityColumns
{
	get { return this.GetPropertyValue<string>("relatedentitycolumns"); }
	set { this.SetPropertyValue("relatedentitycolumns", value, 1073741823, "RelatedEntityColumns"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: importidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("importidname")]
public string ImportIdName
{
	get { return this.GetPropertyValue<string>("importidname"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: additionalheaderrow</para>
///<para>Max Length: 100000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("additionalheaderrow")]
public string AdditionalHeader
{
	get { return this.GetPropertyValue<string>("additionalheaderrow"); }
}
///<summary>
///<para>Logical Name: completedon</para>
///</summary>
[AttributeLogicalNameAttribute("completedon")]
public DateTime? CompletedOn
{
	get { return this.GetPropertyValue<DateTime?>("completedon"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
/// <summary>
///Logical Name: datadelimitercode
/// </summary>
[AttributeLogicalNameAttribute("datadelimitercode")]
public eDataDelimiter? DataDelimiter
{
	get
	{
		if (DataDelimiter_OptionSetValue != null) { return (eDataDelimiter)DataDelimiter_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.DataDelimiter_OptionSetValue = new OptionSetValue((int)value); }
		else this.DataDelimiter_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: datadelimitercode</para>
///</summary>
[AttributeLogicalNameAttribute("datadelimitercode")]
public OptionSetValue DataDelimiter_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("datadelimitercode"); }
	set { this.SetPropertyValue<OptionSetValue>("datadelimitercode", value, "DataDelimiter_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string DataDelimiter_Text(IOrganizationService Service)
{
	return this.DataDelimiter_OptionSetValue.GetOptionSetText(Service, this, "datadelimitercode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string DataDelimiter_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.DataDelimiter_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: importmapid</para>
///</summary>
[AttributeLogicalNameAttribute("importmapid")]
public EntityReference DataMap
{
	get { return this.GetPropertyValue<EntityReference>("importmapid"); }
	set { this.SetPropertyValue<EntityReference>("importmapid", value, "DataMap"); }
}
///<summary>
///<para>Logical Name: enableduplicatedetection</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("enableduplicatedetection")]
public bool? EnableDuplicateDetection
{
	get { return this.GetPropertyValue<bool?>("enableduplicatedetection"); }
	set { this.SetPropertyValue<bool?>("enableduplicatedetection", value, "EnableDuplicateDetection"); }
}
///<summary>
///<para>Logical Name: entitykeyid</para>
///</summary>
[AttributeLogicalNameAttribute("entitykeyid")]
public Guid EntityKeyID
{
	get { return this.GetPropertyValue<Guid>("entitykeyid"); }
	set { this.SetPropertyValue<Guid>("entitykeyid", value, "EntityKeyID"); }
}
///<summary>
///<para>Logical Name: failurecount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("failurecount")]
public int? Errors
{
	get { return this.GetPropertyValue<int?>("failurecount"); }
}
/// <summary>
///Logical Name: fielddelimitercode
/// </summary>
[AttributeLogicalNameAttribute("fielddelimitercode")]
public eFieldDelimiter? FieldDelimiter
{
	get
	{
		if (FieldDelimiter_OptionSetValue != null) { return (eFieldDelimiter)FieldDelimiter_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.FieldDelimiter_OptionSetValue = new OptionSetValue((int)value); }
		else this.FieldDelimiter_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: fielddelimitercode</para>
///</summary>
[AttributeLogicalNameAttribute("fielddelimitercode")]
public OptionSetValue FieldDelimiter_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("fielddelimitercode"); }
	set { this.SetPropertyValue<OptionSetValue>("fielddelimitercode", value, "FieldDelimiter_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string FieldDelimiter_Text(IOrganizationService Service)
{
	return this.FieldDelimiter_OptionSetValue.GetOptionSetText(Service, this, "fielddelimitercode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string FieldDelimiter_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.FieldDelimiter_OptionSetValue.Value);
}
/// <summary>
///Logical Name: filetypecode
/// </summary>
[AttributeLogicalNameAttribute("filetypecode")]
public eFileType? FileType
{
	get
	{
		if (FileType_OptionSetValue != null) { return (eFileType)FileType_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.FileType_OptionSetValue = new OptionSetValue((int)value); }
		else this.FileType_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: filetypecode</para>
///</summary>
[AttributeLogicalNameAttribute("filetypecode")]
public OptionSetValue FileType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("filetypecode"); }
	set { this.SetPropertyValue<OptionSetValue>("filetypecode", value, "FileType_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string FileType_Text(IOrganizationService Service)
{
	return this.FileType_OptionSetValue.GetOptionSetText(Service, this, "filetypecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string FileType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.FileType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: headerrow</para>
///<para>Max Length: 1073741823 characters</para>
///</summary>
[AttributeLogicalNameAttribute("headerrow")]
public string Header
{
	get { return this.GetPropertyValue<string>("headerrow"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: importfileid</para>
///</summary>
[AttributeLogicalNameAttribute("importfileid")]
public Guid ImportId
{
	get
	{
		return base.Id;
	}
	set
	{
		base.Id = value;
		base.SetPropertyValue("importfileid", value, "ImportId");
	}
}
///<summary>
///<para>Logical Name: importid</para>
///</summary>
[AttributeLogicalNameAttribute("importid")]
public EntityReference ImportJobID
{
	get { return this.GetPropertyValue<EntityReference>("importid"); }
	set { this.SetPropertyValue<EntityReference>("importid", value, "ImportJobID"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string ImportName
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 256, "ImportName"); }
}
///<summary>
///<para>Logical Name: isfirstrowheader</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isfirstrowheader")]
public bool? IsFirstRowHeader
{
	get { return this.GetPropertyValue<bool?>("isfirstrowheader"); }
	set { this.SetPropertyValue<bool?>("isfirstrowheader", value, "IsFirstRowHeader"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: parsedtablename</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("parsedtablename")]
public string ParseTable
{
	get { return this.GetPropertyValue<string>("parsedtablename"); }
}
///<summary>
///<para>Logical Name: parsedtablecolumnsnumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("parsedtablecolumnsnumber")]
public int? ParseTableColumnNumber
{
	get { return this.GetPropertyValue<int?>("parsedtablecolumnsnumber"); }
}
///<summary>
///<para>Logical Name: parsedtablecolumnprefix</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("parsedtablecolumnprefix")]
public string ParseTableColumnPrefix
{
	get { return this.GetPropertyValue<string>("parsedtablecolumnprefix"); }
}
///<summary>
///<para>Logical Name: partialfailurecount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("partialfailurecount")]
public int? PartialFailures
{
	get { return this.GetPropertyValue<int?>("partialfailurecount"); }
}
/// <summary>
///Logical Name: processcode
/// </summary>
[AttributeLogicalNameAttribute("processcode")]
public eProcessCode? ProcessCode
{
	get
	{
		if (ProcessCode_OptionSetValue != null) { return (eProcessCode)ProcessCode_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ProcessCode_OptionSetValue = new OptionSetValue((int)value); }
		else this.ProcessCode_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: processcode</para>
///</summary>
[AttributeLogicalNameAttribute("processcode")]
public OptionSetValue ProcessCode_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("processcode"); }
	set { this.SetPropertyValue<OptionSetValue>("processcode", value, "ProcessCode_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ProcessCode_Text(IOrganizationService Service)
{
	return this.ProcessCode_OptionSetValue.GetOptionSetText(Service, this, "processcode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ProcessCode_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ProcessCode_OptionSetValue.Value);
}
/// <summary>
///Logical Name: processingstatus
/// </summary>
[AttributeLogicalNameAttribute("processingstatus")]
public eProcessingStatus? ProcessingStatus
{
	get
	{
		if (ProcessingStatus_OptionSetValue != null) { return (eProcessingStatus)ProcessingStatus_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: processingstatus</para>
///</summary>
[AttributeLogicalNameAttribute("processingstatus")]
public OptionSetValue ProcessingStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("processingstatus"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ProcessingStatus_Text(IOrganizationService Service)
{
	return this.ProcessingStatus_OptionSetValue.GetOptionSetText(Service, this, "processingstatus");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ProcessingStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ProcessingStatus_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: progresscounter</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("progresscounter")]
public int? ProgressCounter
{
	get { return this.GetPropertyValue<int?>("progresscounter"); }
}
///<summary>
///<para>Logical Name: recordsownerid</para>
///</summary>
[AttributeLogicalNameAttribute("recordsownerid")]
public EntityReference RecordsOwner
{
	get { return this.GetPropertyValue<EntityReference>("recordsownerid"); }
	set { this.SetPropertyValue<EntityReference>("recordsownerid", value, "RecordsOwner"); }
}
///<summary>
///<para>Logical Name: size</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("size")]
public string Size
{
	get { return this.GetPropertyValue<string>("size"); }
	set { this.SetPropertyValue("size", value, 160, "Size"); }
}
///<summary>
///<para>Logical Name: source</para>
///<para>Max Length: 256 characters</para>
///</summary>
[AttributeLogicalNameAttribute("source")]
public string Source
{
	get { return this.GetPropertyValue<string>("source"); }
	set { this.SetPropertyValue("source", value, 256, "Source"); }
}
///<summary>
///<para>Logical Name: sourceentityname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("sourceentityname")]
public string SourceEntity
{
	get { return this.GetPropertyValue<string>("sourceentityname"); }
	set { this.SetPropertyValue("sourceentityname", value, 160, "SourceEntity"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: successcount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("successcount")]
public int? Successes
{
	get { return this.GetPropertyValue<int?>("successcount"); }
}
///<summary>
///<para>Logical Name: targetentityname</para>
///<para>Max Length: 160 characters</para>
///</summary>
[AttributeLogicalNameAttribute("targetentityname")]
public string TargetEntity
{
	get { return this.GetPropertyValue<string>("targetentityname"); }
	set { this.SetPropertyValue("targetentityname", value, 160, "TargetEntity"); }
}
///<summary>
///<para>Logical Name: totalcount</para>
///<para>Minimum Value: 0</para>
///<para>Maximum Value: 1000000000</para>
///</summary>
[AttributeLogicalNameAttribute("totalcount")]
public int? TotalProcessed
{
	get { return this.GetPropertyValue<int?>("totalcount"); }
}
/// <summary>
///Logical Name: upsertmodecode
/// </summary>
[AttributeLogicalNameAttribute("upsertmodecode")]
public eUpsertMode? UpsertMode
{
	get
	{
		if (UpsertMode_OptionSetValue != null) { return (eUpsertMode)UpsertMode_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.UpsertMode_OptionSetValue = new OptionSetValue((int)value); }
		else this.UpsertMode_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: upsertmodecode</para>
///</summary>
[AttributeLogicalNameAttribute("upsertmodecode")]
public OptionSetValue UpsertMode_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("upsertmodecode"); }
	set { this.SetPropertyValue<OptionSetValue>("upsertmodecode", value, "UpsertMode_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string UpsertMode_Text(IOrganizationService Service)
{
	return this.UpsertMode_OptionSetValue.GetOptionSetText(Service, this, "upsertmodecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string UpsertMode_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.UpsertMode_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: usesystemmap</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("usesystemmap")]
public bool? UseSystemMap
{
	get { return this.GetPropertyValue<bool?>("usesystemmap"); }
	set { this.SetPropertyValue<bool?>("usesystemmap", value, "UseSystemMap"); }
}


        /// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: ImportFile_AsyncOperations</para>
/// </summary>
public List<Entity> GetSystemJobs (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: ImportFile_AsyncOperations</para>
/// </summary>
public List<Entity> GetSystemJobs (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: ImportFile_BulkDeleteFailures</para>
/// </summary>
public List<Entity> GetBulkDeleteFailures (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: ImportFile_BulkDeleteFailures</para>
/// </summary>
public List<Entity> GetBulkDeleteFailures (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>ImportData (Import File Id)</b></para>
/// <para>Schema Name: ImportFile_ImportData</para>
/// </summary>
public List<ImportData> GetImportData_ImportFileId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ImportData>(Service, this.Id, "importdata", "importfileid", Columns); }
/// <summary>
/// <para><b>ImportData (Import File Id)</b></para>
/// <para>Schema Name: ImportFile_ImportData</para>
/// </summary>
public List<ImportData> GetImportData_ImportFileId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ImportData>(Service, this.Id, "importdata", "importfileid", Columns); }
/// <summary>
/// <para><b>ImportLog (Import File Id)</b></para>
/// <para>Schema Name: ImportLog_ImportFile</para>
/// </summary>
public List<ImportLog> GetImportLogs_ImportFileId (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ImportLog>(Service, this.Id, "importlog", "importfileid", Columns); }
/// <summary>
/// <para><b>ImportLog (Import File Id)</b></para>
/// <para>Schema Name: ImportLog_ImportFile</para>
/// </summary>
public List<ImportLog> GetImportLogs_ImportFileId (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<ImportLog>(Service, this.Id, "importlog", "importfileid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: userentityinstancedata_importfile</para>
/// </summary>
public List<Entity> GetUserEntityInstanceData (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: userentityinstancedata_importfile</para>
/// </summary>
public List<Entity> GetUserEntityInstanceData (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        

        

        public enum eDataDelimiter
{
	///<summary><para>DoubleQuote</para>
	///<para>Value = 1</para></summary>
	[Description("DoubleQuote")]
	DoubleQuote = 1, 
	///<summary><para>None</para>
	///<para>Value = 2</para></summary>
	[Description("None")]
	None = 2, 
	///<summary><para>SingleQuote</para>
	///<para>Value = 3</para></summary>
	[Description("SingleQuote")]
	SingleQuote = 3
}
public enum eFieldDelimiter
{
	///<summary><para>Colon</para>
	///<para>Value = 1</para></summary>
	[Description("Colon")]
	Colon = 1, 
	///<summary><para>Comma</para>
	///<para>Value = 2</para></summary>
	[Description("Comma")]
	Comma = 2, 
	///<summary><para>Tab</para>
	///<para>Value = 3</para></summary>
	[Description("Tab")]
	Tab = 3, 
	///<summary><para>Semicolon</para>
	///<para>Value = 4</para></summary>
	[Description("Semicolon")]
	Semicolon = 4
}
public enum eFileType
{
	///<summary><para>CSV</para>
	///<para>Value = 0</para></summary>
	[Description("CSV")]
	CSV = 0, 
	///<summary><para>XML Spreadsheet 2003</para>
	///<para>Value = 1</para></summary>
	[Description("XML Spreadsheet 2003")]
	XMLSpreadsheet2003 = 1, 
	///<summary><para>Attachment</para>
	///<para>Value = 2</para></summary>
	[Description("Attachment")]
	Attachment = 2, 
	///<summary><para>XLSX</para>
	///<para>Value = 3</para></summary>
	[Description("XLSX")]
	XLSX = 3
}
public enum eProcessCode
{
	///<summary><para>Process</para>
	///<para>Value = 1</para></summary>
	[Description("Process")]
	Process = 1, 
	///<summary><para>Ignore</para>
	///<para>Value = 2</para></summary>
	[Description("Ignore")]
	Ignore = 2, 
	///<summary><para>Internal</para>
	///<para>Value = 3</para></summary>
	[Description("Internal")]
	@Internal = 3
}
public enum eProcessingStatus
{
	///<summary><para>Not Started</para>
	///<para>Value = 1</para></summary>
	[Description("Not Started")]
	NotStarted = 1, 
	///<summary><para>Parsing</para>
	///<para>Value = 2</para></summary>
	[Description("Parsing")]
	Parsing = 2, 
	///<summary><para>Parsing Complete</para>
	///<para>Value = 3</para></summary>
	[Description("Parsing Complete")]
	ParsingComplete = 3, 
	///<summary><para>Complex Transformation</para>
	///<para>Value = 4</para></summary>
	[Description("Complex Transformation")]
	ComplexTransformation = 4, 
	///<summary><para>Lookup Transformation</para>
	///<para>Value = 5</para></summary>
	[Description("Lookup Transformation")]
	LookupTransformation = 5, 
	///<summary><para>Picklist Transformation</para>
	///<para>Value = 6</para></summary>
	[Description("Picklist Transformation")]
	PicklistTransformation = 6, 
	///<summary><para>Owner Transformation</para>
	///<para>Value = 7</para></summary>
	[Description("Owner Transformation")]
	OwnerTransformation = 7, 
	///<summary><para>Transformation Complete</para>
	///<para>Value = 8</para></summary>
	[Description("Transformation Complete")]
	TransformationComplete = 8, 
	///<summary><para>Import Pass 1</para>
	///<para>Value = 9</para></summary>
	[Description("Import Pass 1")]
	ImportPass1 = 9, 
	///<summary><para>Import Pass 2</para>
	///<para>Value = 10</para></summary>
	[Description("Import Pass 2")]
	ImportPass2 = 10, 
	///<summary><para>Import Complete</para>
	///<para>Value = 11</para></summary>
	[Description("Import Complete")]
	ImportComplete = 11, 
	///<summary><para>Primary Key Transformation</para>
	///<para>Value = 12</para></summary>
	[Description("Primary Key Transformation")]
	PrimaryKeyTransformation = 12
}
public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0
}
public enum eStatusReason
{
	///<summary><para>Submitted</para>
	///<para>Value = 0</para></summary>
	[Description("Submitted")]
	Submitted_Active = 0, 
	///<summary><para>Parsing</para>
	///<para>Value = 1</para></summary>
	[Description("Parsing")]
	Parsing_Active = 1, 
	///<summary><para>Transforming</para>
	///<para>Value = 2</para></summary>
	[Description("Transforming")]
	Transforming_Active = 2, 
	///<summary><para>Importing</para>
	///<para>Value = 3</para></summary>
	[Description("Importing")]
	Importing_Active = 3, 
	///<summary><para>Completed</para>
	///<para>Value = 4</para></summary>
	[Description("Completed")]
	Completed_Active = 4, 
	///<summary><para>Failed</para>
	///<para>Value = 5</para></summary>
	[Description("Failed")]
	Failed_Active = 5
}
public enum eUpsertMode
{
	///<summary><para>Create</para>
	///<para>Value = 0</para></summary>
	[Description("Create")]
	Create = 0, 
	///<summary><para>Update</para>
	///<para>Value = 1</para></summary>
	[Description("Update")]
	Update = 1, 
	///<summary><para>Ignore</para>
	///<para>Value = 2</para></summary>
	[Description("Ignore")]
	Ignore = 2
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>importmapidname</para>
	/// <para>importmapidname</para></summary>
	public const string ImportMapIdName = "importmapidname";
	/// <summary><para>timezoneruleversionnumber</para>
	/// <para>timezoneruleversionnumber</para></summary>
	public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>recordsowneridtype</para>
	/// <para>recordsowneridtype</para></summary>
	public const string RecordsOwnerIdType = "recordsowneridtype";
	/// <summary><para>recordsowneridname</para>
	/// <para>recordsowneridname</para></summary>
	public const string RecordsOwnerIdName = "recordsowneridname";
	/// <summary><para>owningbusinessunit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>utcconversiontimezonecode</para>
	/// <para>utcconversiontimezonecode</para></summary>
	public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>content</para>
	/// <para>content</para></summary>
	public const string Content = "content";
	/// <summary><para>relatedentitycolumns</para>
	/// <para>relatedentitycolumns</para></summary>
	public const string RelatedEntityColumns = "relatedentitycolumns";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>importidname</para>
	/// <para>importidname</para></summary>
	public const string ImportIdName = "importidname";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>Additional Header</para>
	/// <para>additionalheaderrow</para></summary>
	public const string AdditionalHeader = "additionalheaderrow";
	/// <summary><para>Completed On</para>
	/// <para>completedon</para></summary>
	public const string CompletedOn = "completedon";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Data Delimiter</para>
	/// <para>datadelimitercode</para></summary>
	public const string DataDelimiter = "datadelimitercode";
	/// <summary><para>Data Map</para>
	/// <para>importmapid</para></summary>
	public const string DataMap = "importmapid";
	/// <summary><para>Enable Duplicate Detection</para>
	/// <para>enableduplicatedetection</para></summary>
	public const string EnableDuplicateDetection = "enableduplicatedetection";
	/// <summary><para>Entity Key ID</para>
	/// <para>entitykeyid</para></summary>
	public const string EntityKeyID = "entitykeyid";
	/// <summary><para>Errors</para>
	/// <para>failurecount</para></summary>
	public const string Errors = "failurecount";
	/// <summary><para>Field Delimiter</para>
	/// <para>fielddelimitercode</para></summary>
	public const string FieldDelimiter = "fielddelimitercode";
	/// <summary><para>File Type</para>
	/// <para>filetypecode</para></summary>
	public const string FileType = "filetypecode";
	/// <summary><para>Header</para>
	/// <para>headerrow</para></summary>
	public const string Header = "headerrow";
	/// <summary><para>Import</para>
	/// <para>importfileid</para></summary>
	public const string ImportId = "importfileid";
	/// <summary><para>Import Job ID</para>
	/// <para>importid</para></summary>
	public const string ImportJobID = "importid";
	/// <summary><para>Import Name</para>
	/// <para>name</para></summary>
	public const string ImportName = "name";
	/// <summary><para>Is First Row Header</para>
	/// <para>isfirstrowheader</para></summary>
	public const string IsFirstRowHeader = "isfirstrowheader";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Parse Table</para>
	/// <para>parsedtablename</para></summary>
	public const string ParseTable = "parsedtablename";
	/// <summary><para>Parse Table Column Number</para>
	/// <para>parsedtablecolumnsnumber</para></summary>
	public const string ParseTableColumnNumber = "parsedtablecolumnsnumber";
	/// <summary><para>Parse Table Column Prefix</para>
	/// <para>parsedtablecolumnprefix</para></summary>
	public const string ParseTableColumnPrefix = "parsedtablecolumnprefix";
	/// <summary><para>Partial Failures</para>
	/// <para>partialfailurecount</para></summary>
	public const string PartialFailures = "partialfailurecount";
	/// <summary><para>Process Code</para>
	/// <para>processcode</para></summary>
	public const string ProcessCode = "processcode";
	/// <summary><para>Processing Status</para>
	/// <para>processingstatus</para></summary>
	public const string ProcessingStatus = "processingstatus";
	/// <summary><para>Progress Counter</para>
	/// <para>progresscounter</para></summary>
	public const string ProgressCounter = "progresscounter";
	/// <summary><para>Records Owner</para>
	/// <para>recordsownerid</para></summary>
	public const string RecordsOwner = "recordsownerid";
	/// <summary><para>Size</para>
	/// <para>size</para></summary>
	public const string Size = "size";
	/// <summary><para>Source</para>
	/// <para>source</para></summary>
	public const string Source = "source";
	/// <summary><para>Source Entity</para>
	/// <para>sourceentityname</para></summary>
	public const string SourceEntity = "sourceentityname";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Successes</para>
	/// <para>successcount</para></summary>
	public const string Successes = "successcount";
	/// <summary><para>Target Entity</para>
	/// <para>targetentityname</para></summary>
	public const string TargetEntity = "targetentityname";
	/// <summary><para>Total Processed</para>
	/// <para>totalcount</para></summary>
	public const string TotalProcessed = "totalcount";
	/// <summary><para>Upsert Mode</para>
	/// <para>upsertmodecode</para></summary>
	public const string UpsertMode = "upsertmodecode";
	/// <summary><para>Use System Map</para>
	/// <para>usesystemmap</para></summary>
	public const string UseSystemMap = "usesystemmap";
}

    }
}
