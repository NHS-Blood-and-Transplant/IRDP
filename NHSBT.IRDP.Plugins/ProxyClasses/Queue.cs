// <auto-generated />

using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace NHSBT.IRDP.Plugins.ProxyClasses
{
    [EntityLogicalNameAttribute("queue")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    [DataContract(Name = "Entity", Namespace = "http://schemas.microsoft.com/xrm/2011/Contracts")]
    public partial class Queue : BaseProxyClass
    {
        public new const string LogicalName = "queue";
        public const int ObjectTypeCode = 2020;
        public const string PrimaryIdAttribute = "queueid";
        public const string PrimaryNameAttribute = "name";
        public const string PrimaryImageAttribute = "entityimage";
        static Queue()
        {
            BaseProxyClass.RegisterProxyType(typeof(Queue), "queue");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Queue() : base(new Entity("queue")) { }
        public Queue(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Queue>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: entityimage_timestamp</para>
///</summary>
[AttributeLogicalNameAttribute("entityimage_timestamp")]
public int? EntityImage_Timestamp
{
	get { return this.GetPropertyValue<int?>("entityimage_timestamp"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: owneridtype</para>
///</summary>
[AttributeLogicalNameAttribute("owneridtype")]
public string OwnerIdType
{
	get { return this.GetPropertyValue<string>("owneridtype"); }
	set { this.SetPropertyValue<string>("owneridtype", value, "OwnerIdType"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: primaryuseridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("primaryuseridyominame")]
public string PrimaryUserIdYomiName
{
	get { return this.GetPropertyValue<string>("primaryuseridyominame"); }
}
///<summary>
///<para>Logical Name: owneridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridname")]
public string OwnerIdName
{
	get { return this.GetPropertyValue<string>("owneridname"); }
}
///<summary>
///<para>Logical Name: primaryuseridname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("primaryuseridname")]
public string PrimaryUserIdName
{
	get { return this.GetPropertyValue<string>("primaryuseridname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyidname")]
public string TransactionCurrencyIdName
{
	get { return this.GetPropertyValue<string>("transactioncurrencyidname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: defaultmailboxname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("defaultmailboxname")]
public string DefaultMailboxName
{
	get { return this.GetPropertyValue<string>("defaultmailboxname"); }
}
///<summary>
///<para>Logical Name: owneridyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("owneridyominame")]
public string OwnerIdYomiName
{
	get { return this.GetPropertyValue<string>("owneridyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: businessunitidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("businessunitidname")]
public string BusinessUnitIdName
{
	get { return this.GetPropertyValue<string>("businessunitidname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: entityimage_url</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("entityimage_url")]
public string EntityImage_URL
{
	get { return this.GetPropertyValue<string>("entityimage_url"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: allowemailcredentials</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("allowemailcredentials")]
public bool? AllowToUseCredentialsForEmailProcessing_Obsolete
{
	get { return this.GetPropertyValue<bool?>("allowemailcredentials"); }
}
///<summary>
///<para>Logical Name: businessunitid</para>
///</summary>
[AttributeLogicalNameAttribute("businessunitid")]
public EntityReference BusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("businessunitid"); }
	set { this.SetPropertyValue<EntityReference>("businessunitid", value, "BusinessUnit"); }
}
/// <summary>
///Logical Name: incomingemailfilteringmethod
/// </summary>
[AttributeLogicalNameAttribute("incomingemailfilteringmethod")]
public eIncomingEmailFilteringMethod? ConvertIncomingEmailToActivities
{
	get
	{
		if (ConvertIncomingEmailToActivities_OptionSetValue != null) { return (eIncomingEmailFilteringMethod)ConvertIncomingEmailToActivities_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.ConvertIncomingEmailToActivities_OptionSetValue = new OptionSetValue((int)value); }
		else this.ConvertIncomingEmailToActivities_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: incomingemailfilteringmethod</para>
///</summary>
[AttributeLogicalNameAttribute("incomingemailfilteringmethod")]
public OptionSetValue ConvertIncomingEmailToActivities_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("incomingemailfilteringmethod"); }
	set { this.SetPropertyValue<OptionSetValue>("incomingemailfilteringmethod", value, "ConvertIncomingEmailToActivities_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ConvertIncomingEmailToActivities_Text(IOrganizationService Service)
{
	return this.ConvertIncomingEmailToActivities_OptionSetValue.GetOptionSetText(Service, this, "incomingemailfilteringmethod");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ConvertIncomingEmailToActivities_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ConvertIncomingEmailToActivities_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: ignoreunsolicitedemail</para>
///<para>True = Only specific Emails</para>
///<para>False = All incoming Emails</para>
///</summary>
[AttributeLogicalNameAttribute("ignoreunsolicitedemail")]
public bool? ConvertToEmailActivities
{
	get { return this.GetPropertyValue<bool?>("ignoreunsolicitedemail"); }
	set { this.SetPropertyValue<bool?>("ignoreunsolicitedemail", value, "ConvertToEmailActivities"); }
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: transactioncurrencyid</para>
///</summary>
[AttributeLogicalNameAttribute("transactioncurrencyid")]
public EntityReference Currency
{
	get { return this.GetPropertyValue<EntityReference>("transactioncurrencyid"); }
	set { this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "Currency"); }
}
///<summary>
///<para>Logical Name: description</para>
///<para>Max Length: 2000 characters</para>
///</summary>
[AttributeLogicalNameAttribute("description")]
public string Description
{
	get { return this.GetPropertyValue<string>("description"); }
	set { this.SetPropertyValue("description", value, 2000, "Description"); }
}
///<summary>
///<para>Logical Name: isemailaddressapprovedbyo365admin</para>
///<para>True = Yes</para>
///<para>False = No</para>
///</summary>
[AttributeLogicalNameAttribute("isemailaddressapprovedbyo365admin")]
public bool? EmailAddressO365AdminApprovalStatus
{
	get { return this.GetPropertyValue<bool?>("isemailaddressapprovedbyo365admin"); }
}
///<summary>
///<para>Logical Name: entityimageid</para>
///</summary>
[AttributeLogicalNameAttribute("entityimageid")]
public Guid EntityImageId
{
	get { return this.GetPropertyValue<Guid>("entityimageid"); }
}
///<summary>
///<para>Logical Name: exchangerate</para>
///<para>Minimum Value: 0.0000000001</para>
///<para>Maximum Value: 100000000000</para>
///<para>Precision: 10</para>
///</summary>
[AttributeLogicalNameAttribute("exchangerate")]
public decimal? ExchangeRate
{
	get { return this.GetPropertyValue<decimal?>("exchangerate"); }
}
///<summary>
///<para>Logical Name: isfaxqueue</para>
///<para>True = Fax Queue</para>
///<para>False = Non-fax Queue</para>
///</summary>
[AttributeLogicalNameAttribute("isfaxqueue")]
public bool? FaxQueue
{
	get { return this.GetPropertyValue<bool?>("isfaxqueue"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
///<summary>
///<para>Logical Name: emailaddress</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("emailaddress")]
public string IncomingEmail
{
	get { return this.GetPropertyValue<string>("emailaddress"); }
	set { this.SetPropertyValue("emailaddress", value, 100, "IncomingEmail"); }
}
/// <summary>
///Logical Name: incomingemaildeliverymethod
/// </summary>
[AttributeLogicalNameAttribute("incomingemaildeliverymethod")]
public eIncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod
{
	get
	{
		if (IncomingEmailDeliveryMethod_OptionSetValue != null) { return (eIncomingEmailDeliveryMethod)IncomingEmailDeliveryMethod_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.IncomingEmailDeliveryMethod_OptionSetValue = new OptionSetValue((int)value); }
		else this.IncomingEmailDeliveryMethod_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: incomingemaildeliverymethod</para>
///</summary>
[AttributeLogicalNameAttribute("incomingemaildeliverymethod")]
public OptionSetValue IncomingEmailDeliveryMethod_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("incomingemaildeliverymethod"); }
	set { this.SetPropertyValue<OptionSetValue>("incomingemaildeliverymethod", value, "IncomingEmailDeliveryMethod_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string IncomingEmailDeliveryMethod_Text(IOrganizationService Service)
{
	return this.IncomingEmailDeliveryMethod_OptionSetValue.GetOptionSetText(Service, this, "incomingemaildeliverymethod");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string IncomingEmailDeliveryMethod_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.IncomingEmailDeliveryMethod_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: defaultmailbox</para>
///</summary>
[AttributeLogicalNameAttribute("defaultmailbox")]
public EntityReference Mailbox
{
	get { return this.GetPropertyValue<EntityReference>("defaultmailbox"); }
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 200, "Name"); }
}
///<summary>
///<para>Logical Name: numberofmembers</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("numberofmembers")]
public int? No_OfMembers
{
	get { return this.GetPropertyValue<int?>("numberofmembers"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public EntityReference Organization
{
	get { return this.GetPropertyValue<EntityReference>("organizationid"); }
}
/// <summary>
///Logical Name: outgoingemaildeliverymethod
/// </summary>
[AttributeLogicalNameAttribute("outgoingemaildeliverymethod")]
public eOutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod
{
	get
	{
		if (OutgoingEmailDeliveryMethod_OptionSetValue != null) { return (eOutgoingEmailDeliveryMethod)OutgoingEmailDeliveryMethod_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.OutgoingEmailDeliveryMethod_OptionSetValue = new OptionSetValue((int)value); }
		else this.OutgoingEmailDeliveryMethod_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: outgoingemaildeliverymethod</para>
///</summary>
[AttributeLogicalNameAttribute("outgoingemaildeliverymethod")]
public OptionSetValue OutgoingEmailDeliveryMethod_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("outgoingemaildeliverymethod"); }
	set { this.SetPropertyValue<OptionSetValue>("outgoingemaildeliverymethod", value, "OutgoingEmailDeliveryMethod_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string OutgoingEmailDeliveryMethod_Text(IOrganizationService Service)
{
	return this.OutgoingEmailDeliveryMethod_OptionSetValue.GetOptionSetText(Service, this, "outgoingemaildeliverymethod");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string OutgoingEmailDeliveryMethod_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.OutgoingEmailDeliveryMethod_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: ownerid</para>
///</summary>
[AttributeLogicalNameAttribute("ownerid")]
public EntityReference Owner
{
	get { return this.GetPropertyValue<EntityReference>("ownerid"); }
	set { this.SetPropertyValue<EntityReference>("ownerid", value, "Owner"); }
}
///<summary>
///<para>Logical Name: primaryuserid</para>
///</summary>
[AttributeLogicalNameAttribute("primaryuserid")]
public EntityReference Owner_deprecated
{
	get { return this.GetPropertyValue<EntityReference>("primaryuserid"); }
	set { this.SetPropertyValue<EntityReference>("primaryuserid", value, "Owner_deprecated"); }
}
///<summary>
///<para>Logical Name: owningbusinessunit</para>
///</summary>
[AttributeLogicalNameAttribute("owningbusinessunit")]
public EntityReference OwningBusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("owningbusinessunit"); }
}
///<summary>
///<para>Logical Name: owningteam</para>
///</summary>
[AttributeLogicalNameAttribute("owningteam")]
public EntityReference OwningTeam
{
	get { return this.GetPropertyValue<EntityReference>("owningteam"); }
}
///<summary>
///<para>Logical Name: owninguser</para>
///</summary>
[AttributeLogicalNameAttribute("owninguser")]
public EntityReference OwningUser
{
	get { return this.GetPropertyValue<EntityReference>("owninguser"); }
}
///<summary>
///<para>Logical Name: emailpassword</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("emailpassword")]
public string Password_Obsolete
{
	get { return this.GetPropertyValue<string>("emailpassword"); }
}
/// <summary>
///Logical Name: emailrouteraccessapproval
/// </summary>
[AttributeLogicalNameAttribute("emailrouteraccessapproval")]
public eShowsWhetherTheEmailAddressIsApprovedForEachMailboxForProcessingEmailThroughServer_sideSynchronizationOrTheEmailRouter? PrimaryEmailStatus
{
	get
	{
		if (PrimaryEmailStatus_OptionSetValue != null) { return (eShowsWhetherTheEmailAddressIsApprovedForEachMailboxForProcessingEmailThroughServer_sideSynchronizationOrTheEmailRouter)PrimaryEmailStatus_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.PrimaryEmailStatus_OptionSetValue = new OptionSetValue((int)value); }
		else this.PrimaryEmailStatus_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: emailrouteraccessapproval</para>
///</summary>
[AttributeLogicalNameAttribute("emailrouteraccessapproval")]
public OptionSetValue PrimaryEmailStatus_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("emailrouteraccessapproval"); }
	set { this.SetPropertyValue<OptionSetValue>("emailrouteraccessapproval", value, "PrimaryEmailStatus_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string PrimaryEmailStatus_Text(IOrganizationService Service)
{
	return this.PrimaryEmailStatus_OptionSetValue.GetOptionSetText(Service, this, "emailrouteraccessapproval");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string PrimaryEmailStatus_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.PrimaryEmailStatus_OptionSetValue.Value);
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: queueid</para>
///</summary>
[AttributeLogicalNameAttribute("queueid")]
public Guid QueueId
{
	get
	{
		return base.Id;
	}
	set
	{
		base.Id = value;
		base.SetPropertyValue("queueid", value, "QueueId");
	}
}
///<summary>
///<para>Logical Name: numberofitems</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("numberofitems")]
public int? QueueItems
{
	get { return this.GetPropertyValue<int?>("numberofitems"); }
}
/// <summary>
///Logical Name: queuetypecode
/// </summary>
[AttributeLogicalNameAttribute("queuetypecode")]
public eQueueType? QueueType
{
	get
	{
		if (QueueType_OptionSetValue != null) { return (eQueueType)QueueType_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: queuetypecode</para>
///</summary>
[AttributeLogicalNameAttribute("queuetypecode")]
public OptionSetValue QueueType_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("queuetypecode"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string QueueType_Text(IOrganizationService Service)
{
	return this.QueueType_OptionSetValue.GetOptionSetText(Service, this, "queuetypecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string QueueType_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.QueueType_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
/// <summary>
///Logical Name: statecode
/// </summary>
[AttributeLogicalNameAttribute("statecode")]
public eStatus? Status
{
	get
	{
		if (Status_OptionSetValue != null) { return (eStatus)Status_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
		else this.Status_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statecode</para>
///</summary>
[AttributeLogicalNameAttribute("statecode")]
public OptionSetValue Status_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statecode"); }
	set { this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Status_Text(IOrganizationService Service)
{
	return this.Status_OptionSetValue.GetOptionSetText(Service, this, "statecode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Status_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
}
/// <summary>
///Logical Name: statuscode
/// </summary>
[AttributeLogicalNameAttribute("statuscode")]
public eStatusReason? StatusReason
{
	get
	{
		if (StatusReason_OptionSetValue != null) { return (eStatusReason)StatusReason_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
		else this.StatusReason_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: statuscode</para>
///</summary>
[AttributeLogicalNameAttribute("statuscode")]
public OptionSetValue StatusReason_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("statuscode"); }
	set { this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string StatusReason_Text(IOrganizationService Service)
{
	return this.StatusReason_OptionSetValue.GetOptionSetText(Service, this, "statuscode");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string StatusReason_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
}
/// <summary>
///Logical Name: queueviewtype
/// </summary>
[AttributeLogicalNameAttribute("queueviewtype")]
public eType? Type
{
	get
	{
		if (Type_OptionSetValue != null) { return (eType)Type_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.Type_OptionSetValue = new OptionSetValue((int)value); }
		else this.Type_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: queueviewtype</para>
///</summary>
[AttributeLogicalNameAttribute("queueviewtype")]
public OptionSetValue Type_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("queueviewtype"); }
	set { this.SetPropertyValue<OptionSetValue>("queueviewtype", value, "Type_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string Type_Text(IOrganizationService Service)
{
	return this.Type_OptionSetValue.GetOptionSetText(Service, this, "queueviewtype");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string Type_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.Type_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: emailusername</para>
///<para>Max Length: 200 characters</para>
///</summary>
[AttributeLogicalNameAttribute("emailusername")]
public string UserName_Obsolete
{
	get { return this.GetPropertyValue<string>("emailusername"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        /// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_activity_parties</para>
/// </summary>
public List<Entity> GetActivityParties (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "activityparty", "partyid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_activity_parties</para>
/// </summary>
public List<Entity> GetActivityParties (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "activityparty", "partyid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_AsyncOperations</para>
/// </summary>
public List<Entity> GetSystemJobs (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_AsyncOperations</para>
/// </summary>
public List<Entity> GetSystemJobs (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_BulkDeleteFailures</para>
/// </summary>
public List<Entity> GetBulkDeleteFailures (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_BulkDeleteFailures</para>
/// </summary>
public List<Entity> GetBulkDeleteFailures (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: convertrule_queue</para>
/// </summary>
public List<Entity> GetRecordCreationAndUpdateRules (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "convertrule", "queueid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: convertrule_queue</para>
/// </summary>
public List<Entity> GetRecordCreationAndUpdateRules (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "convertrule", "queueid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_convertruleitem</para>
/// </summary>
public List<Entity> GetRecordCreationAndUpdateRuleItems (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "convertruleitem", "queueid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_convertruleitem</para>
/// </summary>
public List<Entity> GetRecordCreationAndUpdateRuleItems (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "convertruleitem", "queueid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_DuplicateBaseRecord</para>
/// </summary>
public List<Entity> GetDuplicateRecords (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_DuplicateBaseRecord</para>
/// </summary>
public List<Entity> GetDuplicateRecords (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "baserecordid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_DuplicateMatchingRecord</para>
/// </summary>
public List<Entity> GetDuplicateRecords2 (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_DuplicateMatchingRecord</para>
/// </summary>
public List<Entity> GetDuplicateRecords2 (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "duplicaterecord", "duplicaterecordid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_Email_EmailSender</para>
/// </summary>
public List<Entity> GetEmailMessages (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "email", "emailsender", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_Email_EmailSender</para>
/// </summary>
public List<Entity> GetEmailMessages (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "email", "emailsender", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: mailbox_regarding_queue</para>
/// </summary>
public List<Entity> GetMailboxes (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "mailbox", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: mailbox_regarding_queue</para>
/// </summary>
public List<Entity> GetMailboxes (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "mailbox", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_PostFollows</para>
/// </summary>
public List<Entity> GetFollows (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "postfollow", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_PostFollows</para>
/// </summary>
public List<Entity> GetFollows (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "postfollow", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_PostRegardings</para>
/// </summary>
public List<Entity> GetPostRegarding (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "postregarding", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_PostRegardings</para>
/// </summary>
public List<Entity> GetPostRegarding (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "postregarding", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_PostRoles</para>
/// </summary>
public List<Entity> GetPostRoles (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "postrole", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_PostRoles</para>
/// </summary>
public List<Entity> GetPostRoles (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "postrole", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_principalobjectattributeaccess</para>
/// </summary>
public List<Entity> GetFieldSharing (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_principalobjectattributeaccess</para>
/// </summary>
public List<Entity> GetFieldSharing (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "principalobjectattributeaccess", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_ProcessSessions</para>
/// </summary>
public List<Entity> GetProcessSessions (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_ProcessSessions</para>
/// </summary>
public List<Entity> GetProcessSessions (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "processsession", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>QueueItem (Queue)</b></para>
/// <para>Schema Name: queue_entries</para>
/// </summary>
public List<QueueItem> GetQueueItems_Queue (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QueueItem>(Service, this.Id, "queueitem", "queueid", Columns); }
/// <summary>
/// <para><b>QueueItem (Queue)</b></para>
/// <para>Schema Name: queue_entries</para>
/// </summary>
public List<QueueItem> GetQueueItems_Queue (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<QueueItem>(Service, this.Id, "queueitem", "queueid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_routingruleitem</para>
/// </summary>
public List<Entity> GetRuleItems (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "routingruleitem", "routedqueueid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_routingruleitem</para>
/// </summary>
public List<Entity> GetRuleItems (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "routingruleitem", "routedqueueid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_SyncErrors</para>
/// </summary>
public List<Entity> GetSyncErrors (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Queue_SyncErrors</para>
/// </summary>
public List<Entity> GetSyncErrors (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_system_user</para>
/// </summary>
public List<Entity> GetUsers (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "systemuser", "queueid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: queue_system_user</para>
/// </summary>
public List<Entity> GetUsers (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "systemuser", "queueid", Columns); }
/// <summary>
/// <para><b>Team (Default Queue)</b></para>
/// <para>Schema Name: queue_team</para>
/// </summary>
public List<Team> GetTeams_DefaultQueue (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Team>(Service, this.Id, "team", "queueid", Columns); }
/// <summary>
/// <para><b>Team (Default Queue)</b></para>
/// <para>Schema Name: queue_team</para>
/// </summary>
public List<Team> GetTeams_DefaultQueue (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<Team>(Service, this.Id, "team", "queueid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: userentityinstancedata_queue</para>
/// </summary>
public List<Entity> GetUserEntityInstanceData (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: userentityinstancedata_queue</para>
/// </summary>
public List<Entity> GetUserEntityInstanceData (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        /// <summary>
/// <para>Related Entity: <b>User</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: queuemembership_association</para>
/// </summary>
public List<Entity> GetUsers2 (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities(Service, this, "queue", "queueid", "systemuser", "systemuserid", "queuemembership", "queueid", "systemuserid", Columns); }
public List<Entity> GetUsers2 (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities(Service, this, "queue", "queueid", "systemuser", "systemuserid", "queuemembership", "queueid", "systemuserid", Columns); }
public void RelateUsers (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "queuemembership_association", Items); }
public void RelateUsers (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "queuemembership_association", Items); }
public void UnRelateUsers (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "queuemembership_association", Items); }
public void UnRelateUsers (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "queuemembership_association", Items); }


                /// <summary>
        /// Add an item to the current queue.
        /// </summary>
        /// <param name="Service">Organization Service</param>
        /// <param name="Item">Item to be added/moved to the current queue</param>
        /// <param name="SourceQueueId">Queue to move the item from (Optional)</param>
        /// <returns>Id of the Queue Item</returns>
        public Guid AddItemToQueue(IOrganizationService Service, EntityReference Item, Guid SourceQueueId = default(Guid))
        {
            AddToQueueRequest Request = new AddToQueueRequest() { DestinationQueueId = this.Id, SourceQueueId = SourceQueueId, Target = Item };
            return ((AddToQueueResponse)Service.Execute(Request)).QueueItemId;
        }


        public enum eIncomingEmailFilteringMethod
{
	///<summary><para>All email messages</para>
	///<para>Value = 0</para></summary>
	[Description("All email messages")]
	AllEmailMessages = 0, 
	///<summary><para>Email messages in response to Dynamics 365 email</para>
	///<para>Value = 1</para></summary>
	[Description("Email messages in response to Dynamics 365 email")]
	EmailMessagesInResponseToDynamics365Email = 1, 
	///<summary><para>Email messages from Dynamics 365 Leads, Contacts and Accounts</para>
	///<para>Value = 2</para></summary>
	[Description("Email messages from Dynamics 365 Leads, Contacts and Accounts")]
	EmailMessagesFromDynamics365Leads_ContactsAndAccounts = 2, 
	///<summary><para>Email messages from Dynamics 365 records that are email enabled</para>
	///<para>Value = 3</para></summary>
	[Description("Email messages from Dynamics 365 records that are email enabled")]
	EmailMessagesFromDynamics365RecordsThatAreEmailEnabled = 3, 
	///<summary><para>No email messages</para>
	///<para>Value = 4</para></summary>
	[Description("No email messages")]
	NoEmailMessages = 4
}
public enum eIncomingEmailDeliveryMethod
{
	///<summary><para>None</para>
	///<para>Value = 0</para></summary>
	[Description("None")]
	None = 0, 
	///<summary><para>Server-Side Synchronization or Email Router</para>
	///<para>Value = 2</para></summary>
	[Description("Server-Side Synchronization or Email Router")]
	Server_SideSynchronizationOrEmailRouter = 2, 
	///<summary><para>Forward Mailbox</para>
	///<para>Value = 3</para></summary>
	[Description("Forward Mailbox")]
	ForwardMailbox = 3
}
public enum eOutgoingEmailDeliveryMethod
{
	///<summary><para>None</para>
	///<para>Value = 0</para></summary>
	[Description("None")]
	None = 0, 
	///<summary><para>Server-Side Synchronization or Email Router</para>
	///<para>Value = 2</para></summary>
	[Description("Server-Side Synchronization or Email Router")]
	Server_SideSynchronizationOrEmailRouter = 2
}
public enum eShowsWhetherTheEmailAddressIsApprovedForEachMailboxForProcessingEmailThroughServer_sideSynchronizationOrTheEmailRouter
{
	///<summary><para>Empty</para>
	///<para>Value = 0</para></summary>
	[Description("Empty")]
	Empty = 0, 
	///<summary><para>Approved</para>
	///<para>Value = 1</para></summary>
	[Description("Approved")]
	Approved = 1, 
	///<summary><para>Pending Approval</para>
	///<para>Value = 2</para></summary>
	[Description("Pending Approval")]
	PendingApproval = 2, 
	///<summary><para>Rejected</para>
	///<para>Value = 3</para></summary>
	[Description("Rejected")]
	Rejected = 3
}
public enum eQueueType
{
	///<summary><para>Default Value</para>
	///<para>Value = 1</para></summary>
	[Description("Default Value")]
	DefaultValue = 1
}
public enum eStatus
{
	///<summary><para>Active</para>
	///<para>Value = 0</para></summary>
	[Description("Active")]
	Active = 0, 
	///<summary><para>Inactive</para>
	///<para>Value = 1</para></summary>
	[Description("Inactive")]
	Inactive = 1
}
public enum eStatusReason
{
	///<summary><para>Inactive</para>
	///<para>Value = 2</para></summary>
	[Description("Inactive")]
	Inactive_Inactive = 2, 
	///<summary><para>Active</para>
	///<para>Value = 1</para></summary>
	[Description("Active")]
	Active_Active = 1
}
public enum eType
{
	///<summary><para>Public</para>
	///<para>Value = 0</para></summary>
	[Description("Public")]
	@Public = 0, 
	///<summary><para>Private</para>
	///<para>Value = 1</para></summary>
	[Description("Private")]
	@Private = 1
}
public void SetState(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	Service.SetState(this, (int)State, (int)Status);
}
public async System.Threading.Tasks.Task SetStateAsync(IOrganizationService Service, eStatus State, eStatusReason Status)
{
	 await Service.SetStateAsync(this, (int)State, (int)Status);
}


        public static class Properties
{
	/// <summary><para>entityimage_timestamp</para>
	/// <para>entityimage_timestamp</para></summary>
	public const string EntityImage_Timestamp = "entityimage_timestamp";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>owneridtype</para>
	/// <para>owneridtype</para></summary>
	public const string OwnerIdType = "owneridtype";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>primaryuseridyominame</para>
	/// <para>primaryuseridyominame</para></summary>
	public const string PrimaryUserIdYomiName = "primaryuseridyominame";
	/// <summary><para>owneridname</para>
	/// <para>owneridname</para></summary>
	public const string OwnerIdName = "owneridname";
	/// <summary><para>primaryuseridname</para>
	/// <para>primaryuseridname</para></summary>
	public const string PrimaryUserIdName = "primaryuseridname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>transactioncurrencyidname</para>
	/// <para>transactioncurrencyidname</para></summary>
	public const string TransactionCurrencyIdName = "transactioncurrencyidname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>defaultmailboxname</para>
	/// <para>defaultmailboxname</para></summary>
	public const string DefaultMailboxName = "defaultmailboxname";
	/// <summary><para>owneridyominame</para>
	/// <para>owneridyominame</para></summary>
	public const string OwnerIdYomiName = "owneridyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>businessunitidname</para>
	/// <para>businessunitidname</para></summary>
	public const string BusinessUnitIdName = "businessunitidname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>entityimage_url</para>
	/// <para>entityimage_url</para></summary>
	public const string EntityImage_URL = "entityimage_url";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>Allow to Use Credentials for Email Processing (Obsolete)</para>
	/// <para>allowemailcredentials</para></summary>
	public const string AllowToUseCredentialsForEmailProcessing_Obsolete = "allowemailcredentials";
	/// <summary><para>Business Unit</para>
	/// <para>businessunitid</para></summary>
	public const string BusinessUnit = "businessunitid";
	/// <summary><para>Convert Incoming Email To Activities</para>
	/// <para>incomingemailfilteringmethod</para></summary>
	public const string ConvertIncomingEmailToActivities = "incomingemailfilteringmethod";
	/// <summary><para>Convert To Email Activities</para>
	/// <para>ignoreunsolicitedemail</para></summary>
	public const string ConvertToEmailActivities = "ignoreunsolicitedemail";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By (Delegate)</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedBy_Delegate = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Currency</para>
	/// <para>transactioncurrencyid</para></summary>
	public const string Currency = "transactioncurrencyid";
	/// <summary><para>Description</para>
	/// <para>description</para></summary>
	public const string Description = "description";
	/// <summary><para>Email Address O365 Admin Approval Status</para>
	/// <para>isemailaddressapprovedbyo365admin</para></summary>
	public const string EmailAddressO365AdminApprovalStatus = "isemailaddressapprovedbyo365admin";
	/// <summary><para>Entity Image Id</para>
	/// <para>entityimageid</para></summary>
	public const string EntityImageId = "entityimageid";
	/// <summary><para>Exchange Rate</para>
	/// <para>exchangerate</para></summary>
	public const string ExchangeRate = "exchangerate";
	/// <summary><para>Fax Queue</para>
	/// <para>isfaxqueue</para></summary>
	public const string FaxQueue = "isfaxqueue";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Incoming Email</para>
	/// <para>emailaddress</para></summary>
	public const string IncomingEmail = "emailaddress";
	/// <summary><para>Incoming Email Delivery Method</para>
	/// <para>incomingemaildeliverymethod</para></summary>
	public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
	/// <summary><para>Mailbox</para>
	/// <para>defaultmailbox</para></summary>
	public const string Mailbox = "defaultmailbox";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>No. of Members</para>
	/// <para>numberofmembers</para></summary>
	public const string No_OfMembers = "numberofmembers";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Outgoing Email Delivery Method</para>
	/// <para>outgoingemaildeliverymethod</para></summary>
	public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
	/// <summary><para>Owner</para>
	/// <para>ownerid</para></summary>
	public const string Owner = "ownerid";
	/// <summary><para>Owner (deprecated)</para>
	/// <para>primaryuserid</para></summary>
	public const string Owner_deprecated = "primaryuserid";
	/// <summary><para>Owning Business Unit</para>
	/// <para>owningbusinessunit</para></summary>
	public const string OwningBusinessUnit = "owningbusinessunit";
	/// <summary><para>Owning Team</para>
	/// <para>owningteam</para></summary>
	public const string OwningTeam = "owningteam";
	/// <summary><para>Owning User</para>
	/// <para>owninguser</para></summary>
	public const string OwningUser = "owninguser";
	/// <summary><para>Password (Obsolete)</para>
	/// <para>emailpassword</para></summary>
	public const string Password_Obsolete = "emailpassword";
	/// <summary><para>Primary Email Status</para>
	/// <para>emailrouteraccessapproval</para></summary>
	public const string PrimaryEmailStatus = "emailrouteraccessapproval";
	/// <summary><para>Queue</para>
	/// <para>queueid</para></summary>
	public const string QueueId = "queueid";
	/// <summary><para>Queue Items</para>
	/// <para>numberofitems</para></summary>
	public const string QueueItems = "numberofitems";
	/// <summary><para>Queue Type</para>
	/// <para>queuetypecode</para></summary>
	public const string QueueType = "queuetypecode";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Status</para>
	/// <para>statecode</para></summary>
	public const string Status = "statecode";
	/// <summary><para>Status Reason</para>
	/// <para>statuscode</para></summary>
	public const string StatusReason = "statuscode";
	/// <summary><para>Type</para>
	/// <para>queueviewtype</para></summary>
	public const string Type = "queueviewtype";
	/// <summary><para>User Name (Obsolete)</para>
	/// <para>emailusername</para></summary>
	public const string UserName_Obsolete = "emailusername";
	/// <summary><para>Version Number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
