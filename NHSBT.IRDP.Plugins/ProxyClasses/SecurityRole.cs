// <auto-generated />

using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace NHSBT.IRDP.Plugins.ProxyClasses
{
    [EntityLogicalNameAttribute("role")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    [DataContract(Name = "Entity", Namespace = "http://schemas.microsoft.com/xrm/2011/Contracts")]
    public partial class SecurityRole : BaseProxyClass
    {
        public new const string LogicalName = "role";
        public const int ObjectTypeCode = 1036;
        public const string PrimaryIdAttribute = "roleid";
        public const string PrimaryNameAttribute = "name";
        
        static SecurityRole()
        {
            BaseProxyClass.RegisterProxyType(typeof(SecurityRole), "role");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public SecurityRole() : base(new Entity("role")) { }
        public SecurityRole(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<SecurityRole>(); }
        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }
        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }
        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }
        private static Dictionary<string, eNumberOptions> _numberOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }
        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }

        ///<summary>
///<para>Logical Name: organizationidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("organizationidname")]
public string OrganizationIdName
{
	get { return this.GetPropertyValue<string>("organizationidname"); }
}
///<summary>
///<para>Logical Name: modifiedbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyyominame")]
public string ModifiedByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedbyyominame"); }
}
///<summary>
///<para>Logical Name: parentrootroleidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("parentrootroleidname")]
public string ParentRootRoleIdName
{
	get { return this.GetPropertyValue<string>("parentrootroleidname"); }
}
///<summary>
///<para>Logical Name: createdbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyyominame")]
public string CreatedByYomiName
{
	get { return this.GetPropertyValue<string>("createdbyyominame"); }
}
///<summary>
///<para>Logical Name: modifiedbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedbyname")]
public string ModifiedByName
{
	get { return this.GetPropertyValue<string>("modifiedbyname"); }
}
///<summary>
///<para>Logical Name: parentroleidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("parentroleidname")]
public string ParentRoleIdName
{
	get { return this.GetPropertyValue<string>("parentroleidname"); }
}
///<summary>
///<para>Logical Name: businessunitidname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("businessunitidname")]
public string BusinessUnitIdName
{
	get { return this.GetPropertyValue<string>("businessunitidname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
public string ModifiedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: createdbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdbyname")]
public string CreatedByName
{
	get { return this.GetPropertyValue<string>("createdbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyname")]
public string CreatedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfbyname</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
public string ModifiedOnBehalfByName
{
	get { return this.GetPropertyValue<string>("modifiedonbehalfbyname"); }
}
///<summary>
///<para>Logical Name: createdonbehalfbyyominame</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
public string CreatedOnBehalfByYomiName
{
	get { return this.GetPropertyValue<string>("createdonbehalfbyyominame"); }
}
///<summary>
///<para>Logical Name: businessunitid</para>
///</summary>
[AttributeLogicalNameAttribute("businessunitid")]
public EntityReference BusinessUnit
{
	get { return this.GetPropertyValue<EntityReference>("businessunitid"); }
	set { this.SetPropertyValue<EntityReference>("businessunitid", value, "BusinessUnit"); }
}
///<summary>
///<para>Logical Name: canbedeleted</para>
///</summary>
[AttributeLogicalNameAttribute("canbedeleted")]
public BooleanManagedProperty CanBeDeleted
{
	get { return this.GetPropertyValue<BooleanManagedProperty>("canbedeleted"); }
	set { this.SetPropertyValue<BooleanManagedProperty>("canbedeleted", value, "CanBeDeleted"); }
}
/// <summary>
///Logical Name: componentstate
/// </summary>
[AttributeLogicalNameAttribute("componentstate")]
public eComponentState? ComponentState
{
	get
	{
		if (ComponentState_OptionSetValue != null) { return (eComponentState)ComponentState_OptionSetValue.Value; }
		return null;
	}
}
///<summary>
///<para>Logical Name: componentstate</para>
///</summary>
[AttributeLogicalNameAttribute("componentstate")]
public OptionSetValue ComponentState_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("componentstate"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string ComponentState_Text(IOrganizationService Service)
{
	return this.ComponentState_OptionSetValue.GetOptionSetText(Service, this, "componentstate");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string ComponentState_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.ComponentState_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: createdby</para>
///</summary>
[AttributeLogicalNameAttribute("createdby")]
public EntityReference CreatedBy
{
	get { return this.GetPropertyValue<EntityReference>("createdby"); }
}
///<summary>
///<para>Logical Name: createdonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("createdonbehalfby")]
public EntityReference CreatedByImpersonator
{
	get { return this.GetPropertyValue<EntityReference>("createdonbehalfby"); }
}
///<summary>
///<para>Logical Name: createdon</para>
///</summary>
[AttributeLogicalNameAttribute("createdon")]
public DateTime? CreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("createdon"); }
}
///<summary>
///<para>Logical Name: iscustomizable</para>
///</summary>
[AttributeLogicalNameAttribute("iscustomizable")]
public BooleanManagedProperty Customizable
{
	get { return this.GetPropertyValue<BooleanManagedProperty>("iscustomizable"); }
	set { this.SetPropertyValue<BooleanManagedProperty>("iscustomizable", value, "Customizable"); }
}
///<summary>
///<para>Logical Name: importsequencenumber</para>
///<para>Minimum Value: -2147483648</para>
///<para>Maximum Value: 2147483647</para>
///</summary>
[AttributeLogicalNameAttribute("importsequencenumber")]
public int? ImportSequenceNumber
{
	get { return this.GetPropertyValue<int?>("importsequencenumber"); }
	set { this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber"); }
}
/// <summary>
///Logical Name: isinherited
/// </summary>
[AttributeLogicalNameAttribute("isinherited")]
public eIsInherited? IsInherited
{
	get
	{
		if (IsInherited_OptionSetValue != null) { return (eIsInherited)IsInherited_OptionSetValue.Value; }
		return null;
	}
	set
	{
		if (value != null) { this.IsInherited_OptionSetValue = new OptionSetValue((int)value); }
		else this.IsInherited_OptionSetValue = null;
	}
}
///<summary>
///<para>Logical Name: isinherited</para>
///</summary>
[AttributeLogicalNameAttribute("isinherited")]
public OptionSetValue IsInherited_OptionSetValue
{
	get { return this.GetPropertyValue<OptionSetValue>("isinherited"); }
	set { this.SetPropertyValue<OptionSetValue>("isinherited", value, "IsInherited_OptionSetValue"); }
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="Service">CRM Organization Service</param>
/// <returns></returns>
public string IsInherited_Text(IOrganizationService Service)
{
	return this.IsInherited_OptionSetValue.GetOptionSetText(Service, this, "isinherited");
}
/// <summary>
/// Retrieves the current value's text in the user's language.
/// </summary>
/// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
/// <returns></returns>
public string IsInherited_Text(EnumAttributeMetadata AttributeMetadata)
{
	return AttributeMetadata.GetOptionSetText(this.IsInherited_OptionSetValue.Value);
}
///<summary>
///<para>Logical Name: modifiedby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedby")]
public EntityReference ModifiedBy
{
	get { return this.GetPropertyValue<EntityReference>("modifiedby"); }
}
///<summary>
///<para>Logical Name: modifiedonbehalfby</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedonbehalfby")]
public EntityReference ModifiedBy_Delegate
{
	get { return this.GetPropertyValue<EntityReference>("modifiedonbehalfby"); }
}
///<summary>
///<para>Logical Name: modifiedon</para>
///</summary>
[AttributeLogicalNameAttribute("modifiedon")]
public DateTime? ModifiedOn
{
	get { return this.GetPropertyValue<DateTime?>("modifiedon"); }
}
///<summary>
///<para>Logical Name: name</para>
///<para>Max Length: 100 characters</para>
///</summary>
[AttributeLogicalNameAttribute("name")]
public string Name
{
	get { return this.GetPropertyValue<string>("name"); }
	set { this.SetPropertyValue("name", value, 100, "Name"); }
}
///<summary>
///<para>Logical Name: organizationid</para>
///</summary>
[AttributeLogicalNameAttribute("organizationid")]
public Guid Organization
{
	get { return this.GetPropertyValue<Guid>("organizationid"); }
}
///<summary>
///<para>Logical Name: parentroleid</para>
///</summary>
[AttributeLogicalNameAttribute("parentroleid")]
public EntityReference ParentRole
{
	get { return this.GetPropertyValue<EntityReference>("parentroleid"); }
}
///<summary>
///<para>Logical Name: parentrootroleid</para>
///</summary>
[AttributeLogicalNameAttribute("parentrootroleid")]
public EntityReference ParentRootRole
{
	get { return this.GetPropertyValue<EntityReference>("parentrootroleid"); }
}
///<summary>
///<para>Logical Name: overriddencreatedon</para>
///</summary>
[AttributeLogicalNameAttribute("overriddencreatedon")]
public DateTime? RecordCreatedOn
{
	get { return this.GetPropertyValue<DateTime?>("overriddencreatedon"); }
	set { this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn"); }
}
///<summary>
///<para>Logical Name: overwritetime</para>
///</summary>
[AttributeLogicalNameAttribute("overwritetime")]
public DateTime? RecordOverwriteTime
{
	get { return this.GetPropertyValue<DateTime?>("overwritetime"); }
}
///<summary>
///<para>Key Property (Uniqueidentifier)</para>
///<para>Logical Name: roleid</para>
///</summary>
[AttributeLogicalNameAttribute("roleid")]
public Guid RoleId
{
	get
	{
		return base.Id;
	}
	set
	{
		base.Id = value;
		base.SetPropertyValue("roleid", value, "RoleId");
	}
}
///<summary>
///<para>Logical Name: roletemplateid</para>
///</summary>
[AttributeLogicalNameAttribute("roletemplateid")]
public EntityReference RoleTemplate
{
	get { return this.GetPropertyValue<EntityReference>("roletemplateid"); }
}
///<summary>
///<para>Logical Name: supportingsolutionid</para>
///</summary>
[AttributeLogicalNameAttribute("supportingsolutionid")]
public Guid Solution
{
	get { return this.GetPropertyValue<Guid>("supportingsolutionid"); }
}
///<summary>
///<para>Logical Name: solutionid</para>
///</summary>
[AttributeLogicalNameAttribute("solutionid")]
public Guid Solution2
{
	get { return this.GetPropertyValue<Guid>("solutionid"); }
}
///<summary>
///<para>Logical Name: ismanaged</para>
///<para>True = Managed</para>
///<para>False = Unmanaged</para>
///</summary>
[AttributeLogicalNameAttribute("ismanaged")]
public bool? State
{
	get { return this.GetPropertyValue<bool?>("ismanaged"); }
}
///<summary>
///<para>Logical Name: roleidunique</para>
///</summary>
[AttributeLogicalNameAttribute("roleidunique")]
public Guid UniqueId
{
	get { return this.GetPropertyValue<Guid>("roleidunique"); }
}
///<summary>
///<para>Logical Name: versionnumber</para>
///</summary>
[AttributeLogicalNameAttribute("versionnumber")]
public int? VersionNumber
{
	get { return this.GetPropertyValue<int?>("versionnumber"); }
}


        /// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Role_AsyncOperations</para>
/// </summary>
public List<Entity> GetSystemJobs (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Role_AsyncOperations</para>
/// </summary>
public List<Entity> GetSystemJobs (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "asyncoperation", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Role_BulkDeleteFailures</para>
/// </summary>
public List<Entity> GetBulkDeleteFailures (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Role_BulkDeleteFailures</para>
/// </summary>
public List<Entity> GetBulkDeleteFailures (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "bulkdeletefailure", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: lk_msdyn_roleid</para>
/// </summary>
public List<Entity> GetActionCardRoleSettings (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "msdyn_actioncardrolesetting", "msdyn_roleid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: lk_msdyn_roleid</para>
/// </summary>
public List<Entity> GetActionCardRoleSettings (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "msdyn_actioncardrolesetting", "msdyn_roleid", Columns); }
/// <summary>
/// <para><b>SecurityRole (Parent Role)</b></para>
/// <para>Schema Name: role_parent_role</para>
/// </summary>
public List<SecurityRole> GetSecurityRoles_ParentRole (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SecurityRole>(Service, this.Id, "role", "parentroleid", Columns); }
/// <summary>
/// <para><b>SecurityRole (Parent Role)</b></para>
/// <para>Schema Name: role_parent_role</para>
/// </summary>
public List<SecurityRole> GetSecurityRoles_ParentRole (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SecurityRole>(Service, this.Id, "role", "parentroleid", Columns); }
/// <summary>
/// <para><b>SecurityRole (Parent Root Role)</b></para>
/// <para>Schema Name: role_parent_root_role</para>
/// </summary>
public List<SecurityRole> GetSecurityRoles_ParentRootRole (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SecurityRole>(Service, this.Id, "role", "parentrootroleid", Columns); }
/// <summary>
/// <para><b>SecurityRole (Parent Root Role)</b></para>
/// <para>Schema Name: role_parent_root_role</para>
/// </summary>
public List<SecurityRole> GetSecurityRoles_ParentRootRole (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities<SecurityRole>(Service, this.Id, "role", "parentrootroleid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Role_SyncErrors</para>
/// </summary>
public List<Entity> GetSyncErrors (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: Role_SyncErrors</para>
/// </summary>
public List<Entity> GetSyncErrors (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "syncerror", "regardingobjectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: userentityinstancedata_role</para>
/// </summary>
public List<Entity> GetUserEntityInstanceData (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "userentityinstancedata", "objectid", Columns); }
/// <summary>
/// <para><b>Entity ()</b></para>
/// <para>Schema Name: userentityinstancedata_role</para>
/// </summary>
public List<Entity> GetUserEntityInstanceData (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedOneToManyEntities(Service, this.Id, "userentityinstancedata", "objectid", Columns); }


        /// <summary>
/// <para>Related Entity: <b>Model-driven App</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: appmoduleroles_association</para>
/// </summary>
public List<Entity> GetModel_drivenApps (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities(Service, this, "role", "roleid", "appmodule", "appmoduleid", "appmoduleroles", "roleid", "appmoduleid", Columns); }
public List<Entity> GetModel_drivenApps (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities(Service, this, "role", "roleid", "appmodule", "appmoduleid", "appmoduleroles", "roleid", "appmoduleid", Columns); }
public void RelateModel_drivenApps (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "appmoduleroles_association", Items); }
public void RelateModel_drivenApps (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "appmoduleroles_association", Items); }
public void UnRelateModel_drivenApps (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "appmoduleroles_association", Items); }
public void UnRelateModel_drivenApps (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "appmoduleroles_association", Items); }
/// <summary>
/// <para>Related Entity: <b>Privilege</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: roleprivileges_association</para>
/// </summary>
public List<Entity> GetPrivileges (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities(Service, this, "role", "roleid", "privilege", "privilegeid", "roleprivileges", "roleid", "privilegeid", Columns); }
public List<Entity> GetPrivileges (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities(Service, this, "role", "roleid", "privilege", "privilegeid", "roleprivileges", "roleid", "privilegeid", Columns); }
public void RelatePrivileges (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "roleprivileges_association", Items); }
public void RelatePrivileges (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "roleprivileges_association", Items); }
public void UnRelatePrivileges (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "roleprivileges_association", Items); }
public void UnRelatePrivileges (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "roleprivileges_association", Items); }
/// <summary>
/// <para>Related Entity: <b>User</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: systemuserroles_association</para>
/// </summary>
public List<Entity> GetUsers (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities(Service, this, "role", "roleid", "systemuser", "systemuserid", "systemuserroles", "roleid", "systemuserid", Columns); }
public List<Entity> GetUsers (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities(Service, this, "role", "roleid", "systemuser", "systemuserid", "systemuserroles", "roleid", "systemuserid", Columns); }
public void RelateUsers (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "systemuserroles_association", Items); }
public void RelateUsers (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "systemuserroles_association", Items); }
public void UnRelateUsers (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "systemuserroles_association", Items); }
public void UnRelateUsers (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "systemuserroles_association", Items); }
/// <summary>
/// <para>Related Entity: <b>Team</b></para>
/// <para>N:N Relationship</para>
/// <para>Schema Name: teamroles_association</para>
/// </summary>
public List<Entity> GetTeams (IOrganizationService Service, params string[] Columns) { return BaseProxyClass.GetRelatedManyToManyEntities(Service, this, "role", "roleid", "team", "teamid", "teamroles", "roleid", "teamid", Columns); }
public List<Entity> GetTeams (IOrganizationService Service, ColumnSet Columns) { return BaseProxyClass.GetRelatedManyToManyEntities(Service, this, "role", "roleid", "team", "teamid", "teamroles", "roleid", "teamid", Columns); }
public void RelateTeams (IOrganizationService Service, params Entity[] Items) { Service.RelateEntities(this, "teamroles_association", Items); }
public void RelateTeams (IOrganizationService Service, params EntityReference[] Items) { Service.RelateEntities(this, "teamroles_association", Items); }
public void UnRelateTeams (IOrganizationService Service, params Entity[] Items) { Service.UnRelateEntities(this, "teamroles_association", Items); }
public void UnRelateTeams (IOrganizationService Service, params EntityReference[] Items) { Service.UnRelateEntities(this, "teamroles_association", Items); }


                /// <summary>
        /// Add privileges to the current role.
        /// </summary>
        /// <param name="Service">Organization Service</param>
        /// <param name="Privileges">Privileges to add to the current role.</param>
        public void AddPrivileges(IOrganizationService Service, List<RolePrivilege> Privileges)
        {
            AddPrivilegesRoleRequest Request = new AddPrivilegesRoleRequest() { RoleId = this.Id, Privileges = Privileges.ToArray() };
            Service.Execute(Request);
        }
        /// <summary>
        /// Add a privilege to the current role.
        /// </summary>
        /// <param name="Service">Organization Service</param>
        /// <param name="EntityLogicalName">Entity Logical Name</param>
        /// <param name="Type">Privilege Type</param>
        /// <param name="Depth">Privilege Level</param>
        public void AddPrivilege(IOrganizationService Service, string EntityLogicalName, PrivilegeType Type, PrivilegeDepth Depth)
        {
            RetrieveEntityRequest RERequest = new RetrieveEntityRequest() { LogicalName = base.LogicalName, EntityFilters = Microsoft.Xrm.Sdk.Metadata.EntityFilters.Privileges };
            RetrieveEntityResponse REResponse = Service.Execute(RERequest) as RetrieveEntityResponse;

            SecurityPrivilegeMetadata Privilege = (from Priv in REResponse.EntityMetadata.Privileges where Priv.PrivilegeType == Type select Priv).FirstOrDefault();
            if (Privilege != null)
            {
                AddPrivilegesRoleRequest Request = new AddPrivilegesRoleRequest()
                {
                    RoleId = this.Id,
                    Privileges = new RolePrivilege[] {
                        new RolePrivilege{ BusinessUnitId = this.GetAttributeValue<Guid>("businessunitid"), PrivilegeId = Privilege.PrivilegeId, Depth = Depth} 
                    }
                };
                Service.Execute(Request);
            }
        }
        /// <summary>
        /// Remove a privilege from the current role.
        /// </summary>
        /// <param name="Service">Organization Service</param>
        /// <param name="Privilege">Id of the privilege to remove.</param>
        public void RemovePrivilege(IOrganizationService Service, Guid Privilege)
        {
            RemovePrivilegeRoleRequest Request = new RemovePrivilegeRoleRequest() { RoleId = this.Id, PrivilegeId = Privilege };
            Service.Execute(Request);
        }


        public enum eComponentState
{
	///<summary><para>Published</para>
	///<para>Value = 0</para></summary>
	[Description("Published")]
	Published = 0, 
	///<summary><para>Unpublished</para>
	///<para>Value = 1</para></summary>
	[Description("Unpublished")]
	Unpublished = 1, 
	///<summary><para>Deleted</para>
	///<para>Value = 2</para></summary>
	[Description("Deleted")]
	Deleted = 2, 
	///<summary><para>Deleted Unpublished</para>
	///<para>Value = 3</para></summary>
	[Description("Deleted Unpublished")]
	DeletedUnpublished = 3
}
public enum eIsInherited
{
	///<summary><para>Default - Team privileges only</para>
	///<para>Value = 0</para></summary>
	[Description("Default - Team privileges only")]
	Default_TeamPrivilegesOnly = 0, 
	///<summary><para>Direct User (Basic) access level and Team privileges</para>
	///<para>Value = 1</para></summary>
	[Description("Direct User (Basic) access level and Team privileges")]
	DirectUser_Basic_AccessLevelAndTeamPrivileges = 1
}


        public static class Properties
{
	/// <summary><para>organizationidname</para>
	/// <para>organizationidname</para></summary>
	public const string OrganizationIdName = "organizationidname";
	/// <summary><para>modifiedbyyominame</para>
	/// <para>modifiedbyyominame</para></summary>
	public const string ModifiedByYomiName = "modifiedbyyominame";
	/// <summary><para>parentrootroleidname</para>
	/// <para>parentrootroleidname</para></summary>
	public const string ParentRootRoleIdName = "parentrootroleidname";
	/// <summary><para>createdbyyominame</para>
	/// <para>createdbyyominame</para></summary>
	public const string CreatedByYomiName = "createdbyyominame";
	/// <summary><para>modifiedbyname</para>
	/// <para>modifiedbyname</para></summary>
	public const string ModifiedByName = "modifiedbyname";
	/// <summary><para>parentroleidname</para>
	/// <para>parentroleidname</para></summary>
	public const string ParentRoleIdName = "parentroleidname";
	/// <summary><para>businessunitidname</para>
	/// <para>businessunitidname</para></summary>
	public const string BusinessUnitIdName = "businessunitidname";
	/// <summary><para>modifiedonbehalfbyyominame</para>
	/// <para>modifiedonbehalfbyyominame</para></summary>
	public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
	/// <summary><para>createdbyname</para>
	/// <para>createdbyname</para></summary>
	public const string CreatedByName = "createdbyname";
	/// <summary><para>createdonbehalfbyname</para>
	/// <para>createdonbehalfbyname</para></summary>
	public const string CreatedOnBehalfByName = "createdonbehalfbyname";
	/// <summary><para>modifiedonbehalfbyname</para>
	/// <para>modifiedonbehalfbyname</para></summary>
	public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
	/// <summary><para>createdonbehalfbyyominame</para>
	/// <para>createdonbehalfbyyominame</para></summary>
	public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
	/// <summary><para>Business Unit</para>
	/// <para>businessunitid</para></summary>
	public const string BusinessUnit = "businessunitid";
	/// <summary><para>Can Be Deleted</para>
	/// <para>canbedeleted</para></summary>
	public const string CanBeDeleted = "canbedeleted";
	/// <summary><para>Component State</para>
	/// <para>componentstate</para></summary>
	public const string ComponentState = "componentstate";
	/// <summary><para>Created By</para>
	/// <para>createdby</para></summary>
	public const string CreatedBy = "createdby";
	/// <summary><para>Created By Impersonator</para>
	/// <para>createdonbehalfby</para></summary>
	public const string CreatedByImpersonator = "createdonbehalfby";
	/// <summary><para>Created On</para>
	/// <para>createdon</para></summary>
	public const string CreatedOn = "createdon";
	/// <summary><para>Customizable</para>
	/// <para>iscustomizable</para></summary>
	public const string Customizable = "iscustomizable";
	/// <summary><para>Import Sequence Number</para>
	/// <para>importsequencenumber</para></summary>
	public const string ImportSequenceNumber = "importsequencenumber";
	/// <summary><para>Is Inherited</para>
	/// <para>isinherited</para></summary>
	public const string IsInherited = "isinherited";
	/// <summary><para>Modified By</para>
	/// <para>modifiedby</para></summary>
	public const string ModifiedBy = "modifiedby";
	/// <summary><para>Modified By (Delegate)</para>
	/// <para>modifiedonbehalfby</para></summary>
	public const string ModifiedBy_Delegate = "modifiedonbehalfby";
	/// <summary><para>Modified On</para>
	/// <para>modifiedon</para></summary>
	public const string ModifiedOn = "modifiedon";
	/// <summary><para>Name</para>
	/// <para>name</para></summary>
	public const string Name = "name";
	/// <summary><para>Organization</para>
	/// <para>organizationid</para></summary>
	public const string Organization = "organizationid";
	/// <summary><para>Parent Role</para>
	/// <para>parentroleid</para></summary>
	public const string ParentRole = "parentroleid";
	/// <summary><para>Parent Root Role</para>
	/// <para>parentrootroleid</para></summary>
	public const string ParentRootRole = "parentrootroleid";
	/// <summary><para>Record Created On</para>
	/// <para>overriddencreatedon</para></summary>
	public const string RecordCreatedOn = "overriddencreatedon";
	/// <summary><para>Record Overwrite Time</para>
	/// <para>overwritetime</para></summary>
	public const string RecordOverwriteTime = "overwritetime";
	/// <summary><para>Role</para>
	/// <para>roleid</para></summary>
	public const string RoleId = "roleid";
	/// <summary><para>Role Template</para>
	/// <para>roletemplateid</para></summary>
	public const string RoleTemplate = "roletemplateid";
	/// <summary><para>Solution</para>
	/// <para>supportingsolutionid</para></summary>
	public const string Solution = "supportingsolutionid";
	/// <summary><para>Solution</para>
	/// <para>solutionid</para></summary>
	public const string Solution2 = "solutionid";
	/// <summary><para>State</para>
	/// <para>ismanaged</para></summary>
	public const string State = "ismanaged";
	/// <summary><para>Unique Id</para>
	/// <para>roleidunique</para></summary>
	public const string UniqueId = "roleidunique";
	/// <summary><para>Version number</para>
	/// <para>versionnumber</para></summary>
	public const string VersionNumber = "versionnumber";
}

    }
}
